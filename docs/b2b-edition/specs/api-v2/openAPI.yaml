openapi: 3.0.1
info:
  title: Open API
  description: BigCommerce B2B Edition Open API Docs
  version: v3
servers:
  - url: https://api-b2b.bigcommerce.com/api/v2/io
security:
  - Basic: []
tags:
  - name: Address
  - name: Company
  - name: Order
  - name: Payment
  - name: Proxy
  - name: SalesRep
  - name: User
paths:
  /addresses/country_state:
    get:
      tags:
      - Address
      deprecated: true
      summary: Convert Country State
      description: Convert country/state name to their code or code to name
      operationId: addresses_country_state_list
      parameters:
      - name: authToken
        in: header
        description: Auth token in header
        required: true
        schema:
          type: string
      - name: country
        in: query
        description: Country code/name
        schema:
          type: string
      - name: state
        in: query
        description: Country code/name
        schema:
          type: string
      - name: search_type
        in: query
        description: "Convert type, code means transfer the input country/state name\
          \ to their code, name means transfer the input country/state code to their\
          \ name"
        schema:
          type: string
          enum:
          - code
          - name
      responses:
        "200":
          description: Response success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      countryCode:
                        type: string
                        description: The converted country code from input country
                          name
                      countryName:
                        type: string
                        description: The converted country name from input country
                          code
                      stateCode:
                        type: string
                        description: The converted state code from input state name
                      stateName:
                        type: string
                        description: The converted state name from input country code
                    description: Response data
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                data:
                  countryName: United States
                  stateName: New York
                message: SUCCESS
        "404":
          description: Response record not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      errMsg:
                        type: string
                        description: Error message info
                    description: Response data
                  message:
                    type: string
                    description: Response message
                description: Response body
              example:
                code: 404
                data: {}
                message: Not Found Error
      x-code-samples:
      - lang: Shell
        source: |2

          curl --location --request GET 'localhost:8000/api/v2/io/addresses/country_state?search_type=code&country=United%20States&state=New%20York'                         --header 'authToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiMWk2enB4cGUzZyIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoia2lkby56aGFvQGJ1bmRsZWIyYi5uZXQifQ.fB8TtxpTDdhOUmR_7gYV16w9nV3Kp0US52W8JMHG1js'                         --header 'Cookie: csrftoken=1r2Sm1HUb6NglzK7V5QJlcS7YlptUtVVGKCu9AbcYeyrKNy9erCk0SDDZnI8YKz7'
      - lang: Python
        source: |2

          import requests

          url = "localhost:8000/api/v2/io/addresses/country_state?search_type=name&country=US&state=NY"

          payload={}
          headers = {
            'authToken': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiMWk2enB4cGUzZyIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoia2lkby56aGFvQGJ1bmRsZWIyYi5uZXQifQ.fB8TtxpTDdhOUmR_7gYV16w9nV3Kp0US52W8JMHG1js',
            'Cookie': 'csrftoken=1r2Sm1HUb6NglzK7V5QJlcS7YlptUtVVGKCu9AbcYeyrKNy9erCk0SDDZnI8YKz7'
          }

          response = requests.request("GET", url, headers=headers, data=payload)

          print(response.text)
      - lang: JavaScript
        source: |2

          var myHeaders = new Headers();
          myHeaders.append("authToken", "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiMWk2enB4cGUzZyIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoia2lkby56aGFvQGJ1bmRsZWIyYi5uZXQifQ.fB8TtxpTDdhOUmR_7gYV16w9nV3Kp0US52W8JMHG1js");
          myHeaders.append("Cookie", "csrftoken=1r2Sm1HUb6NglzK7V5QJlcS7YlptUtVVGKCu9AbcYeyrKNy9erCk0SDDZnI8YKz7");

          var requestOptions = {
            method: 'GET',
            headers: myHeaders,
            redirect: 'follow'
          };

          fetch("localhost:8000/api/v2/io/addresses/country_state?search_type=code&country=United States&state=New York", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
  /companies/convert-from-customer-group:
    post:
      tags:
      - Company
      deprecated: true
      summary: Create Company From CG
      description: Create company from bigCommerce customer group. This API only enable
        for non-MSF store.
      operationId: companies_convert-from-customer-group_create
      parameters:
      - name: authToken
        in: header
        description: Auth token in header.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              description: Request body
              allOf:
              - required:
                - adminEmail
                - adminFirstName
                - adminLastName
                - companyEmail
                - companyName
                - customerGroupId
                - phoneNumber
                type: object
                properties:
                  acceptWelcomeEmail:
                    type: string
                    description: (0=will not receive email 1=will receive email)
                    enum:
                    - "0"
                    - "1"
                  addressLine1:
                    type: string
                    description: Address string line 1
                  addressLine2:
                    type: string
                    description: Address string line 2
                  adminEmail:
                    type: string
                    description: Company admin user email
                  adminFirstName:
                    type: string
                    description: Company admin user's first name
                  adminLastName:
                    type: string
                    description: Company admin user's last name
                  adminPhoneNumber:
                    type: string
                    description: Company admin user phone number
                  city:
                    type: string
                  companyEmail:
                    type: string
                  companyName:
                    type: string
                  country:
                    type: string
                  customerGroupId:
                    type: string
                    description: BC customer group ID
                  extraFields:
                    type: array
                    description: "To use customized extra fields with field names\
                      \ you need to first add company extra fields in Settings > Extra\
                      \ fields inside B2B edition. eg. If you want to create a new\
                      \ company with an extra integer field named licenseNO, you can\
                      \ use this structure [{'fieldName': 'LicenseNO', 'fieldValue':\
                      \ 10342340323}] in the request body."
                    items:
                      type: object
                      properties:
                        fieldName:
                          type: string
                        fieldValue:
                          type: string
                  phoneNumber:
                    type: string
                  state:
                    type: string
                  zipCode:
                    type: string
              - $ref: '#/components/schemas/user_extra_field_values'
        required: true
      responses:
        "200":
          description: Response Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      companyId:
                        type: string
                        description: Created company Id
                    description: Response data
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                data:
                  companyId: "2"
                message: Success
        "400":
          description: Response Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status error code
                  data:
                    type: object
                    properties:
                      '[field]':
                        type: string
                        description: Message about problem with field 'field'
                    description: Response error data
                  message:
                    type: string
                    description: Response error message
                description: Response body
              example:
                code: 40010
                message: Enter a valid email address.
        "404":
          description: Not Found Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      errMsg:
                        type: string
                        description: Error message info
                    description: Response data
                  message:
                    type: string
                    description: Response message
                description: Response body
              example:
                code: 404
                data:
                  errMsg: Customer group does not exist
                message: Not Found Error
      x-code-samples:
      - lang: Shell
        source: |2

          curl --location --request POST 'https://api-b2b.bigcommerce.com/api/v2/io/companies/convert-from-customer-group'                         --header 'authToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'                         --header 'Content-Type: application/json'                         --data-raw '{
              "companyName": "test3.23-22",
              "phoneNumber": 122331212,
              "companyEmail": "test@test.com",
              "addressLine1": "xxxx",
              "addressLine2": "",
              "city": "xxxx",
              "state": "xxxx",
              "zipCode": "12333",
              "country": "China",
              "adminFirstName": "test",
              "adminLastName": "sdfsd",
              "adminEmail": "test1@test.com",
              "adminPhoneNumber": "3838288282",
              "customerGroupId": 4
          }'
      - lang: Python
        source: |2

          import requests

          url = "https://api-b2b.bigcommerce.com/api/v2/io/companies/convert-from-customer-group"

          payload = {
              "companyName": "test3.23-22",
              "phoneNumber": 122331212,
              "companyEmail": "test@test.com",
              "addressLine1": "xxxx",
              "addressLine2": "",
              "city": "xxxx",
              "state": "xxxx",
              "zipCode": "12333",
              "country": "China",
              "adminFirstName": "test",
              "adminLastName": "sdfsd",
              "adminEmail": "test1@test.com",
              "adminPhoneNumber": "3838288282",
              "customerGroupId": 4
          }
          headers = {
            'authToken': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY',
            'Content-Type': 'application/json'
          }
          response = requests.request("POST", url, headers=headers, data = payload)
          print(response.text.encode('utf8'))
      - lang: JavaScript
        source: |2

          var myHeaders = new Headers();
          myHeaders.append("authToken", "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY");
          myHeaders.append("Content-Type", "application/json");

          var raw = JSON.stringify({"companyName":"test3.23-22","phoneNumber":122331212,"companyEmail":"test@test.com","addressLine1":"xxxx","addressLine2":"","city":"xxxx","state":"xxxx","zipCode":"12333","country":"China","adminFirstName":"test","adminLastName":"sdfsd","adminEmail":"test1@test.com","adminPhoneNumber":"3838288282","customerGroupId":4});

          var requestOptions = {
            method: 'POST',
            headers: myHeaders,
            body: raw,
            redirect: 'follow'
          };

          fetch("https://api-b2b.bigcommerce.com/api/v2/io/companies/convert-from-customer-group", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
      x-codegen-request-body-name: data
  /companies/users/{customerId}/orders:
    post:
      tags:
      - Order
      deprecated: true
      summary: Create Order Without CompanyID
      description: "Create an order from bigCommerce, you must known order id"
      operationId: companies_users_orders_create
      parameters:
      - name: customerId
        in: path
        required: true
        schema:
          type: string
      - name: authToken
        in: header
        description: Auth token in header.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              description: Request body
              allOf:
              - required:
                - orderId
                - totalIncTax
                type: object
                properties:
                  orderId:
                    type: string
                    description: BigCommerce order id
                  poNumber:
                    type: string
                    description: PoNumber
                  totalIncTax:
                    type: number
                    description: Total incTax
        required: true
      responses:
        "200":
          description: Response Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      companyId:
                        type: string
                        description: Created order id
                    description: Response data
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                data:
                  orderId: 2
                message: Success
        "400":
          description: Response Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status error code
                  data:
                    type: object
                    properties:
                      '[field]':
                        type: string
                        description: Message about problem with field 'field'
                    description: Response error data
                  message:
                    type: string
                    description: Response error message
                description: Response body
              example:
                code: 40010
                data:
                  bc_order_id: orderId can not be null
                message: Bad Request Error
        "404":
          description: Not Found Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      errMsg:
                        type: string
                        description: Error message info
                    description: Response data
                  message:
                    type: string
                    description: Response message
                description: Response body
              example:
                code: 404
                data:
                  errMsg: Companies Does not Exist
                message: Not Found Error
      x-code-samples:
      - lang: Shell
        source: "\ncurl --location --request POST 'https://api-b2b.bigcommerce.com/api/v2/io/companies/users/12/orders'\
          \                         --header 'authToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'\
          \                         --header 'Content-Type: application/json'    \
          \                     --data-raw '{\n    \"totalIncTax\": \"111\",\n   \
          \ \"orderId\": \"111\"\n}' \n"
      - lang: Python
        source: |2

          import requests

          url = "https://api-b2b.bigcommerce.com/api/v2/io/companies/users/12/orders"

          payload = {
              "totalIncTax": "111",
              "orderId": "111"
          }
          headers = {
            'authToken': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY',
            'Content-Type': 'application/json'
          }

          response = requests.request("POST", url, headers=headers, data = payload)

          print(response.text.encode('utf8'))
      - lang: JavaScript
        source: |2

          var myHeaders = new Headers();
          myHeaders.append("authToken", "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY");
          myHeaders.append("Content-Type", "application/json");

          var raw = JSON.stringify({"totalIncTax":"111","orderId":"111"});

          var requestOptions = {
            method: 'POST',
            headers: myHeaders,
            body: raw,
            redirect: 'follow'
          };

          fetch("https://api-b2b.bigcommerce.com/api/v2/io/companies/users/12/orders", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
      x-codegen-request-body-name: data
  /companies/{companyId}/addresses:
    get:
      tags:
      - Address
      deprecated: true
      summary: Get Company Addresses
      description: Get all addresses for a company
      operationId: companies_addresses_list
      parameters:
      - name: companyId
        in: path
        required: true
        schema:
          type: string
      - name: authToken
        in: header
        description: Auth token in header.
        required: true
        schema:
          type: string
      - name: minLastModifiedTime
        in: query
        description: "Company filter condition: timestamp string e.g. 01/01/2000"
        schema:
          type: number
      - name: maxLastModifiedTime
        in: query
        description: "Company filter condition: timestamp string e.g. 01/01/2000"
        schema:
          type: number
      - name: minLastCreatedTime
        in: query
        description: "Company filter condition: timestamp string e.g. 01/01/2000"
        schema:
          type: number
      - name: maxLastCreatedTime
        in: query
        description: "Company filter condition: timestamp string e.g. 01/01/2000"
        schema:
          type: number
      - name: q
        in: query
        description: Company query string
        schema:
          type: string
      - name: firstName
        in: query
        description: Address first name filter
        schema:
          type: number
      - name: lastName
        in: query
        description: Address first name filter
        schema:
          type: number
      - name: address
        in: query
        description: Address line 1 filter
        schema:
          type: number
      - name: city
        in: query
        description: Address city filter
        schema:
          type: number
      - name: country
        in: query
        description: Address country filter
        schema:
          type: number
      - name: state
        in: query
        description: Address state filter
        schema:
          type: number
      - name: zipCode
        in: query
        description: Address zip code filter
        schema:
          type: number
      - name: phoneNumber
        in: query
        description: Address phone number filter
        schema:
          type: number
      - name: isShipping
        in: query
        description: Address is shipping filter
        schema:
          type: number
      - name: isBilling
        in: query
        description: Address is billing filter
        schema:
          type: number
      - name: "externalId[]"
        in: query
        description: Address external id filter
        style: form
        explode: false
        schema:
          type: array
      - name: offset
        in: query
        description: "Address pagination offset, default 0"
        schema:
          type: number
      - name: limit
        in: query
        description: "Address pagination limit, default 4. "
        schema:
          maximum: 500
          minimum: 4
          type: number
      responses:
        "200":
          description: Response Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      addresses:
                        type: object
                        properties:
                          '[address_id]':
                            type: object
                            properties:
                              addressId:
                                type: string
                                description: Identifier for the address (same as URL
                                  parameter addressId)
                              addressLine1:
                                type: string
                                description: Typically the street address
                              addressLine2:
                                type: string
                                description: "More detailed information about where\
                                  \ to deliver mail, such as a suite or office number"
                              city:
                                type: string
                              country:
                                type: object
                                properties:
                                  countryCode:
                                    type: string
                                    description: ISO 3166-1 Alpha 2 Country Code
                                  countryName:
                                    type: string
                                    description: Human readable country name
                              firstName:
                                type: string
                              isBilling:
                                type: boolean
                                description: Indicates whether the address is a billing
                                  address
                              isDefaultBilling:
                                type: boolean
                              isDefaultShipping:
                                type: boolean
                              isShipping:
                                type: boolean
                                description: Indicates whether the address is a shipping
                                  address
                              lastName:
                                type: string
                              phoneNumber:
                                type: string
                              state:
                                type: object
                                properties:
                                  stateCode:
                                    type: string
                                    description: ISO 3166-2 Alpha 2 Country Subdivision
                                      Code
                                  stateName:
                                    type: string
                                    description: Human readable state (or other subdivision)
                                      name
                              zipCode:
                                type: string
                                description: A valid postal code used by the country
                                  that was specified
                              externalId:
                                type: string
                            description: The map from address ID to address
                          defaultBillingId:
                            type: number
                            description: The identifier of the default shipping address
                          defaultShippingId:
                            type: number
                            description: The identifier of the default shipping address
                        description: All addresses
                    description: Response data
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                data:
                  addresses:
                    "7":
                      addressId: "7"
                      addressLine1: 123 Main Street
                      addressLine2: Blvd
                      city: Austin
                      country:
                        countryCode: US
                        countryName: United States
                      firstName: Jane
                      isBilling: true
                      isDefaultBilling: true
                      isDefaultShipping: true
                      isShipping: true
                      lastName: Doe
                      phoneNumber: "11111111111"
                      state:
                        stateCode: TX
                        stateName: Texas
                      zipCode: "78751"
                      channelId: 1
                      channelName: test
                  defaultBillingId: "7"
                  defaultShippingId: "7"
                message: SUCCESS
      x-code-samples:
      - lang: Shell
        source: "\ncurl --location --request GET 'https://api-b2b.bigcommerce.com/api/v2/io/companies/39/addresses?minLastModifiedTime=1/11/2019&maxLastModifiedTime=1/11/2020&minLastCreatedTime=1/11/2019&maxLastCreatedTime=1/11/2020'\
          \                         --header 'authToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'\
          \                         --header 'Content-Type: application/json' \n"
      - lang: Python
        source: |2+

          import requests

          url = "https://api-b2b.bigcommerce.com/api/v2/io/companies/39/addresses?minLastModifiedTime=1/11/2019&maxLastModifiedTime=1/11/2020&minLastCreatedTime=1/11/2019&maxLastCreatedTime=1/11/2020"

          payload = {}
          headers = {
            'authToken': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY',
            'Content-Type': 'application/json'
          }

          response = requests.request("GET", url, headers=headers, data = payload)

          print(response.text.encode('utf8'))

      - lang: JavaScript
        source: |2

          var myHeaders = new Headers();
          myHeaders.append("authToken", "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY");
          myHeaders.append("Content-Type", "application/json");

          var requestOptions = {
            method: 'GET',
            headers: myHeaders,
            redirect: 'follow'
          };

          fetch("https://api-b2b.bigcommerce.com/api/v2/io/companies/39/addresses?minLastModifiedTime=1/11/2019&maxLastModifiedTime=1/11/2020&minLastCreatedTime=1/11/2019&maxLastCreatedTime=1/11/2020", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
    post:
      tags:
      - Address
      deprecated: true
      summary: Create A Company Address
      description: "Creates a new address for a company. You will specify the address\
        \ fields and the type of address. The address can be billing, shipping, or\
        \ both. You can also request that this address becomes the new default billing\
        \ or shipping address for the company."
      operationId: companies_addresses_create
      parameters:
      - name: companyId
        in: path
        required: true
        schema:
          type: string
      - name: authToken
        in: header
        description: Auth token in header.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
              - addressLine1
              - city
              - country
              - firstName
              - lastName
              - state
              - zipCode
              type: object
              properties:
                addressLine1:
                  type: string
                  description: Typically the street address
                addressLine2:
                  type: string
                  description: "More detailed information about where to deliver mail,\
                    \ such as a suite or office number"
                city:
                  type: string
                country:
                  type: object
                  properties:
                    countryCode:
                      type: string
                      description: ISO 3166-1 Alpha 2 Country Code
                    countryName:
                      type: string
                      description: Human readable country name
                firstName:
                  type: string
                  description: Address first name
                isBilling:
                  type: boolean
                  description: Indicates whether the address is a billing address
                isDefaultBilling:
                  type: boolean
                  description: Indicates whether the address is the default billing
                    address
                isDefaultShipping:
                  type: boolean
                  description: Indicates whether the address is the default shipping
                    address
                isShipping:
                  type: boolean
                  description: Indicates whether the address is a shipping address
                label:
                  type: string
                  description: Address label
                lastName:
                  type: string
                  description: Address last name
                phoneNumber:
                  type: string
                  description: Address phone number
                state:
                  type: object
                  properties:
                    stateCode:
                      type: string
                      description: ISO 3166-2 Alpha 2 Country Subdivision Code
                    stateName:
                      type: string
                      description: Human readable state (or other subdivision) name
                zipCode:
                  type: string
                externalId:
                  type: string
              description: Request body
        required: true
      responses:
        "200":
          description: Response Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                    example: 200.0
                  data:
                    type: object
                    properties:
                      addressId:
                        type: integer
                        description: Created address Id
                        example: 12
                    description: Response data
                  meta:
                    type: object
                    properties:
                      message:
                        type: string
                        description: Response message
                        example: Success
            example-1:
              example:
                code: 200
                data:
                  addressId: 12
                meta:
                  message: Success
        "422":
          description: Response Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status error code
                    example: 422.0
                  data:
                    type: object
                    properties:
                      errMsg:
                        type: array
                        description: Message about problem with field 'field'
                        items:
                          type: object
                          properties:
                            '[field]':
                              type: string
                              description: field error description.
                              example: xxx field is too long.
                    description: Response error data
                  meta:
                    type: object
                    properties:
                      message:
                        type: string
                        description: Response error message
                        example: Parameter Error
                description: Response body
            example-1:
              example:
                code: 422
                data:
                  errMsg:
                  - '[field]': xxx field is too long.
                meta:
                  message: Parameter Error
      x-code-samples:
      - lang: Shell
        source: |2

          curl --location --request POST 'https://api-b2b.bigcommerce.com/api/v2/io/companies/23/addresses'                         --header 'Content-Type: application/json'                         --data-raw '{
              "label": "12dxqwdsa",
              "firstName": "Bundle",
              "lastName": "Test",
              "addressLine1": "Street.1",
              "addressLine2": "",
              "city": "New York",
              "zipCode": "110202",
              "phoneNumber": "",
              "country": {
                  "countryName": "United States",
                  "countryCode": "US"
              },
              "state": {
                  "stateName": "New York",
                  "stateCode": "NY"
              },
              "isShipping": "1",
              "isBilling": "1",
              "isDefaultShipping": true,
              "isDefaultBilling": true
          }'
      - lang: Python
        source: |2

                                  import requests

                                  url = "https://api-b2b.bigcommerce.com/api/v2/io/companies/23/addresses"

                                  payload = "{
              "label": "12dxqwdsa",
              "firstName": "Bundle",
              "lastName": "Test",
              "addressLine1": "Street.1",
              "addressLine2": "",
              "city": "New York",
              "zipCode": "110202",
              "phoneNumber": "",
              "country": {
                  "countryName": "United States",
                  "countryCode": "US"
              },
              "state": {
                  "stateName": "New York",
                  "stateCode": "NY"
              },
              "isShipping": "1",
              "isBilling": "1",
              "isDefaultShipping": true,
              "isDefaultBilling": true
          }"
                                  headers = {
                                    'Content-Type': 'application/json'
                                  }

                                  response = requests.request("POST", url, headers=headers, data = payload)

                                  print(response.text.encode('utf8'))
      - lang: JavaScript
        source: |2

          var myHeaders = new Headers();
          myHeaders.append("Content-Type", "application/json");

          var raw = JSON.stringify({"label":"12dxqwdsa","firstName":"Bundle","lastName":"Test","addressLine1":"Street.1","addressLine2":"","city":"New York","zipCode":"110202","phoneNumber":"","country":{"countryName":"United States","countryCode":"US"},"state":{"stateName":"New York","stateCode":"NY"},"isShipping":"1","isBilling":"1","isDefaultShipping":"1","isDefaultBilling":"0"});

          var requestOptions = {
            method: 'POST',
            headers: myHeaders,
            body: raw,
            redirect: 'follow'
          };

          fetch("https://api-b2b.bigcommerce.com/api/v2/io/companies/23/addresses", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
      x-codegen-request-body-name: data
  /companies/{companyId}/addresses/{addressId}:
    get:
      tags:
      - Address
      deprecated: true
      summary: Get A Company Address
      description: Get an address for a company
      operationId: companies_addresses_read
      parameters:
      - name: addressId
        in: path
        required: true
        schema:
          type: string
      - name: companyId
        in: path
        required: true
        schema:
          type: string
      - name: authToken
        in: header
        description: Auth token in header.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Response success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      addresses:
                        type: object
                        properties:
                          addressId:
                            type: string
                            description: Identifier for the address (same as URL parameter
                              addressId)
                          addressLine1:
                            type: string
                            description: Typically the street address
                          addressLine2:
                            type: string
                            description: "More detailed information about where to\
                              \ deliver mail, such as a suite or office number"
                          city:
                            type: string
                          country:
                            type: object
                            properties:
                              countryCode:
                                type: string
                                description: ISO 3166-1 Alpha 2 Country Code
                              countryName:
                                type: string
                                description: Human readable country name
                          firstName:
                            type: string
                          isBilling:
                            type: boolean
                            description: Indicates whether the address is a billing
                              address
                          isDefaultBilling:
                            type: boolean
                          isDefaultShipping:
                            type: boolean
                          isShipping:
                            type: boolean
                            description: Indicates whether the address is a shipping
                              address
                          lastName:
                            type: string
                          phoneNumber:
                            type: string
                          state:
                            type: object
                            properties:
                              stateCode:
                                type: string
                                description: ISO 3166-2 Alpha 2 Country Subdivision
                                  Code
                              stateName:
                                type: string
                                description: Human readable state (or other subdivision)
                                  name
                          zipCode:
                            type: string
                            description: A valid postal code used by the country that
                              was specified
                          externalId:
                            type: string
                        description: All addresses
                    description: Response data
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                data:
                  addressId: "6"
                  addressLine1: 123 Main Street
                  addressLine2: Blvd
                  city: Austin
                  country:
                    countryCode: US
                    countryName: United States
                  firstName: Jane
                  isBilling: true
                  isDefaultBilling: true
                  isDefaultShipping: true
                  isShipping: true
                  lastName: Doe
                  phoneNumber: "11111111111"
                  state:
                    stateCode: TX
                    stateName: Texas
                  zipCode: "78751"
                  channelId: 1
                  channelName: test
                message: SUCCESS
        "404":
          description: Response record not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      errMsg:
                        type: string
                        description: Error message info
                    description: Response data
                  message:
                    type: string
                    description: Response message
                description: Response body
              example:
                code: 404
                data: {}
                message: Not Found Error
      x-code-samples:
      - lang: Shell
        source: |2

          curl --location --request GET 'https://api-b2b.bigcommerce.com/api/v2/io/companies/39/addresses/2'                         --header 'authToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'                         --header 'Content-Type: application/json'
      - lang: Python
        source: |2

          import requests

          url = "https://api-b2b.bigcommerce.com/api/v2/io/companies/39/addresses/2"

          payload = {}
          headers = {
            'authToken': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY',
            'Content-Type': 'application/json'
          }

          response = requests.request("GET", url, headers=headers, data = payload)

          print(response.text.encode('utf8'))
      - lang: JavaScript
        source: |2

          var myHeaders = new Headers();
          myHeaders.append("authToken", "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY");
          myHeaders.append("Content-Type", "application/json");

          var requestOptions = {
            method: 'GET',
            headers: myHeaders,
            redirect: 'follow'
          };

          fetch("https://api-b2b.bigcommerce.com/api/v2/io/companies/39/addresses/2", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
    put:
      tags:
      - Address
      deprecated: true
      summary: Update A Company Address
      description: "Updates an address for a company. You can change whether the address\
        \ is for billing, shipping, or both. You can also update the address to be\
        \ the default billing or shipping address for the company."
      operationId: companies_addresses_update
      parameters:
      - name: addressId
        in: path
        required: true
        schema:
          type: string
      - name: companyId
        in: path
        required: true
        schema:
          type: string
      - name: authToken
        in: header
        description: Auth token in header.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                addressLine1:
                  type: string
                  description: Typically the street address
                addressLine2:
                  type: string
                  description: "More detailed information about where to deliver mail,\
                    \ such as a suite or office number"
                city:
                  type: string
                country:
                  type: object
                  properties:
                    countryCode:
                      type: string
                      description: ISO 3166-1 Alpha 2 Country Code
                    countryName:
                      type: string
                      description: Human readable country name
                firstName:
                  type: string
                  description: Address first name
                isBilling:
                  type: boolean
                  description: Indicates whether the address is a billing address
                isDefaultBilling:
                  type: boolean
                  description: Indicates whether the address is the default billing
                    address
                isDefaultShipping:
                  type: boolean
                  description: Indicates whether the address is the default shipping
                    address
                isShipping:
                  type: boolean
                  description: Indicates whether the address is a shipping address
                label:
                  type: string
                  description: Address label
                lastName:
                  type: string
                  description: Address last name
                phoneNumber:
                  type: string
                  description: Address phone number
                state:
                  type: object
                  properties:
                    stateCode:
                      type: string
                      description: ISO 3166-2 Alpha 2 Country Subdivision Code
                    stateName:
                      type: string
                      description: Human readable state (or other subdivision) name
                zipCode:
                  type: string
                externalId:
                  type: string
              description: Request body
        required: true
      responses:
        "200":
          description: Response Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      addressId:
                        type: string
                        description: Updated address Id
                    description: Response data
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                data:
                  addressId: 4
                message: Success
        "400":
          description: Response Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status error code
                  data:
                    type: object
                    properties:
                      '[field]':
                        type: string
                        description: Message about problem with field 'field'
                    description: Response error data
                  message:
                    type: string
                    description: Response error message
                description: Response body
              example:
                code: 40010
                data:
                  address_line_1: Address not allow None
                  last_name: Last name not allow None
                message: Bad Requests Error
        "404":
          description: Not Found Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      errMsg:
                        type: string
                        description: Error message info
                    description: Response data
                  message:
                    type: string
                    description: Response message
                description: Response body
              example:
                code: 404
                data:
                  errMsg: Address Does not Exist
                message: Not Found Error
      x-code-samples:
      - lang: Shell
        source: |2

          curl --location --request PUT 'https://api-b2b.bigcommerce.com/api/v2/io/companies/23/addresses/4'                         --header 'authToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'                         --header 'Content-Type: application/json'                         --data-raw '{
              "label": "12dxqwdsa",
              "firstName": "Bundle",
              "lastName": "Test",
              "addressLine1": "Street.1",
              "addressLine2": "",
              "city": "New York",
              "zipCode": "110202",
              "phoneNumber": "",
              "country": {
                  "countryName": "United States",
                  "countryCode": "US"
              },
              "state": {
                  "stateName": "New York",
                  "stateCode": "NY"
              },
              "isShipping": "1",
              "isBilling": "1",
              "isDefaultShipping": "1",
              "isDefaultBilling": "0"
          }'
      - lang: Python
        source: |2

          import requests

          url = "https://api-b2b.bigcommerce.com/api/v2/io/companies/23/addresses/4"
          payload = {
              "label": "12dxqwdsa",
              "firstName": "Bundle",
              "lastName": "Test",
              "addressLine1": "Street.1",
              "addressLine2": "",
              "city": "New York",
              "zipCode": "110202",
              "phoneNumber": "",
              "country": {
                  "countryName": "United States",
                  "countryCode": "US"
              },
              "state": {
                  "stateName": "New York",
                  "stateCode": "NY"
              },
              "isShipping": "1",
              "isBilling": "1",
              "isDefaultShipping": "1",
              "isDefaultBilling": "0"
          }
          headers = {
            'authToken': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY',
            'Content-Type': 'application/json'
          }

          response = requests.request("PUT", url, headers=headers, data = payload)

          print(response.text.encode('utf8'))
      - lang: JavaScript
        source: |2

          var myHeaders = new Headers();
          myHeaders.append("authToken", "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY");
          myHeaders.append("Content-Type", "application/json");

          var raw = JSON.stringify({"label":"12dxqwdsa","firstName":"Bundle","lastName":"Test","addressLine1":"Street.1","addressLine2":"","city":"New York","zipCode":"110202","phoneNumber":"","country":{"countryName":"United States","countryCode":"US"},"state":{"stateName":"New York","stateCode":"NY"},"isShipping":"1","isBilling":"1","isDefaultShipping":"1","isDefaultBilling":"0"});

          var requestOptions = {
            method: 'PUT',
            headers: myHeaders,
            body: raw,
            redirect: 'follow'
          };

          fetch("https://api-b2b.bigcommerce.com/api/v2/io/companies/23/addresses/4", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
      x-codegen-request-body-name: data
    delete:
      tags:
      - Address
      deprecated: true
      summary: Delete A Company Address
      description: Deletes an address from a company.
      operationId: companies_addresses_delete
      parameters:
      - name: addressId
        in: path
        required: true
        schema:
          type: string
      - name: companyId
        in: path
        required: true
        schema:
          type: string
      - name: authToken
        in: header
        description: Auth token in header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Deleted successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      addressId:
                        type: string
                        description: Deleted address Id
                    description: Response data
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                data:
                  addressId: 2
                message: Success
        "404":
          description: Company not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties: {}
                    description: Response data
                  message:
                    type: string
                    description: Response message
                description: Response body
              example:
                code: 404
                data:
                  errMsg: Address Does not Exist
                message: Not Found Error
      x-code-samples:
      - lang: Shell
        source: |2

          curl --location --request DELETE 'https://api-b2b.bigcommerce.com/api/v2/io/companies/23/addresses/4'                         --header 'authToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'
      - lang: Python
        source: |2

          import requests

          url = "https://api-b2b.bigcommerce.com/api/v2/io/companies/23/addresses/4"

          payload = {}
          headers = {
            'authToken': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'
          }

          response = requests.request("DELETE", url, headers=headers, data = payload)

          print(response.text.encode('utf8'))
      - lang: JavaScript
        source: |2

          var myHeaders = new Headers();
          myHeaders.append("authToken", "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY");

          var requestOptions = {
            method: 'DELETE',
            headers: myHeaders,
            redirect: 'follow'
          };

          fetch("https://api-b2b.bigcommerce.com/api/v2/io/companies/23/addresses/4", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
  /companies/{companyId}/basic-info:
    get:
      tags:
      - Company
      deprecated: true
      summary: Get Company Basic Information
      description: Get company's basic information
      operationId: companies_basic-info_list
      parameters:
      - name: companyId
        in: path
        required: true
        schema:
          type: string
      - name: authToken
        in: header
        description: Auth token in header.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Response Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      addressLine1:
                        type: string
                        description: Company address line 1
                      addressLine2:
                        type: string
                        description: Company address line 2
                      catalogId:
                        type: string
                        description: Catalog Id
                      catalogName:
                        type: string
                        description: Catalog Id
                      city:
                        type: string
                        description: Company city
                      companyEmail:
                        type: string
                        description: Company email
                      companyId:
                        type: string
                        description: Company Id
                      companyName:
                        type: string
                        description: Company name
                      companyStatus:
                        type: string
                        description: Company status
                      country:
                        type: string
                        description: Company country
                      description:
                        type: string
                        description: Company description
                      extraFields:
                        type: array
                        description: Company extra fields
                        items:
                          type: object
                          properties:
                            dataType:
                              type: string
                              description: "Field data type, 0=text, 1=number, 2=textarea."
                            fieldName:
                              type: string
                              description: Field name
                            fieldValue:
                              type: string
                              description: Field value
                            isRequired:
                              type: string
                              description: "Is field required or not, 0=not required,\
                                \ 1=required"
                            labelName:
                              type: string
                              description: Field label name
                      phoneNumber:
                        type: string
                        description: Company phone number
                      state:
                        type: string
                        description: Company state
                      updatedAt:
                        type: string
                        description: Company updated timestamp
                      uuid:
                        type: string
                        description: UUID
                      zipCode:
                        type: string
                        description: Company zip code
                    description: Response data
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                data:
                  addressLine1: ""
                  addressLine2: ""
                  catalogId: "1"
                  catalogName: testCatalogName
                  city: Paris
                  companyEmail: test@bundleb2b.com
                  companyId: "35"
                  companyName: CropTest1
                  companyStatus: "1"
                  country: French
                  description: CropTest
                  extraFields:
                  - dataType: "2"
                    fieldName: extraStr1
                    fieldValue: extra_text
                    isRequired: "0"
                    labelName: Enter your license
                  phoneNumber: "10030212001"
                  state: BC
                  updatedAt: "1594192159"
                  uuid: "111"
                  zipCode: "1032332"
                message: SUCCESS
        "404":
          description: Not Found Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      errMsg:
                        type: string
                        description: Error message info
                    description: Response data
                  message:
                    type: string
                    description: Response message
                description: Response body
              example:
                code: 404
                data:
                  errMsg: Companies Does not Exist
                message: Not Found Error
      x-code-samples:
      - lang: Shell
        source: |2

          curl --location --request GET 'https://api-b2b.bigcommerce.com/api/v2/companies/23/basic-info'                         --header 'authToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'                         --header 'Content-Type: application/json'
      - lang: Python
        source: |2

          import requests

          url = "https://api-b2b.bigcommerce.com/api/v2/companies/23/basic-info"

          payload = {}
          headers = {
            'authToken': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY',
            'Content-Type': 'application/json'
          }

          response = requests.request("GET", url, headers=headers, data = payload)

          print(response.text.encode('utf8'))
      - lang: JavaScript
        source: |2

          var myHeaders = new Headers();
          myHeaders.append("authToken", "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY");
          myHeaders.append("Content-Type", "application/json");

          var requestOptions = {
            method: 'GET',
            headers: myHeaders,
            redirect: 'follow'
          };

          fetch("https://api-b2b.bigcommerce.com/api/v2/companies/23/basic-info", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
    put:
      tags:
      - Company
      deprecated: true
      summary: Update Company Basic Information
      description: "Update a company's basic info, you can update on or more options"
      operationId: companies_basic-info_update
      parameters:
      - name: companyId
        in: path
        required: true
        schema:
          type: string
      - name: authToken
        in: header
        description: Auth token in header.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                addressLine1:
                  type: string
                  description: Address string line 1
                addressLine2:
                  type: string
                  description: Address string line 2
                catalogId:
                  type: string
                  description: BigCommerce price list Id that company related(If put
                    its 0 will clear the catalog).
                city:
                  type: string
                companyEmail:
                  type: string
                companyName:
                  type: string
                companyStatus:
                  type: string
                  description: "Company status: \n\n 0=PENDING 1=APPROVED 2=REJECTED\
                    \ 3=INACTIVE 4=DELETED"
                country:
                  type: string
                  description: "\nCountry full name or ISO2 country code. For Example:\
                    \ \n\nA Country full name: Afghanistan \n\nISO2 Country code:\
                    \ AF\n"
                description:
                  type: string
                extraFields:
                  type: array
                  description: "To use customized extra fields with field names you\
                    \ need to first add company extra fields in Settings > Extra fields\
                    \ inside B2B edition. eg. If you want to create a new company\
                    \ with an extra integer field named licenseNO, you can use this\
                    \ structure [{'fieldName': 'LicenseNO', 'fieldValue': 10342340323}]\
                    \ in the request body."
                  items:
                    type: object
                    properties:
                      fieldName:
                        type: string
                      fieldValue:
                        type: string
                phoneNumber:
                  type: string
                state:
                  type: string
                zipCode:
                  type: string
                priceListAssign:
                  type: array
                  items:
                    type: object
                    properties:
                      channelId:
                        type: integer
                        description: BigCommerce channel id
                      priceListId:
                        type: integer
                        description: BC price list ID
              description: Request body
        required: true
      responses:
        "200":
          description: Response Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      companyId:
                        type: string
                        description: Updated company Id
                    description: Response data
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                data:
                  companyId: "2"
                message: Success
        "404":
          description: Not Found Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      errMsg:
                        type: string
                        description: Error message info
                    description: Response data
                  message:
                    type: string
                    description: Response message
                description: Response body
              example:
                code: 404
                data:
                  errMsg: Companies Does not Exist
                message: Not Found Error
      x-code-samples:
      - lang: Shell
        source: |2

          curl --location --request PUT 'https://api-b2b.bigcommerce.com/api/v2/io/companies/23'                         --header 'authToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'                         --header 'Content-Type: application/json'                         --data-raw '{
              "companyName": "test3.23-22",
              "phoneNumber": 122331212,
              "companyEmail": "test@test.com",
              "addressLine1": "xxxx",
              "addressLine2": "",

          }'
      - lang: Python
        source: "\n                        import requests\n\n                   \
          \     url = \"https://api-b2b.bigcommerce.com/api/v2/io/companies/23\"\n\
          \n                        payload = \"{\n\t\"companyName\": \"test3.23-22\"\
          ,\n\t\"phoneNumber\": 122331212,\n\t\"companyEmail\": \"test@test.com\"\
          ,\n\t\"addressLine1\": \"xxxx\",\n\t\"addressLine2\": \"\",\n\n}\"\n   \
          \                     headers = {\n                          'authToken':\
          \ 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY',\n\
          \                          'Content-Type': 'application/json'\n        \
          \                }\n\n                        response = requests.request(\"\
          PUT\", url, headers=headers, data = payload)\n\n                       \
          \ print(response.text.encode('utf8'))\n"
      - lang: JavaScript
        source: "\n                        var myHeaders = new Headers();\n      \
          \                  myHeaders.append(\"authToken\", \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY\"\
          );\n                        myHeaders.append(\"Content-Type\", \"application/json\"\
          );\n\n                        var raw = \"{\n\t\"companyName\": \"test3.23-22\"\
          ,\n\t\"phoneNumber\": 122331212,\n\t\"companyEmail\": \"test@test.com\"\
          ,\n\t\"addressLine1\": \"xxxx\",\n\t\"addressLine2\": \"\",\n\n}\";\n\n\
          \                        var requestOptions = {\n                      \
          \    method: 'PUT',\n                          headers: myHeaders,\n   \
          \                       body: raw,\n                          redirect:\
          \ 'follow'\n                        };\n\n                        fetch(\"\
          https://api-b2b.bigcommerce.com/api/v2/io/companies/23\", requestOptions)\n\
          \                          .then(response => response.text())\n        \
          \                  .then(result => console.log(result))\n              \
          \            .catch(error => console.log('error', error));\n"
      x-codegen-request-body-name: data
  /companies/{companyId}/force-del:
    delete:
      tags:
      - Company
      deprecated: true
      summary: Delete Company With Related
      description: Force Delete A Company and its Related Information.
      operationId: companies_force-del_delete
      parameters:
      - name: companyId
        in: path
        required: true
        schema:
          type: string
      - name: authToken
        in: header
        description: Auth token in header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Deleted successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      companyId:
                        type: string
                        description: Deleted company Id
                    description: Response data
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                data:
                  companyId: "2"
                message: Success
        "404":
          description: Company not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties: {}
                    description: Response data
                  message:
                    type: string
                    description: Response message
                description: Response body
              example:
                code: 404
                data:
                  errMsg: Companies Does not Exist
                message: Not Found Error
      x-code-samples:
      - lang: Shell
        source: |2

          curl --location --request PUT 'https://api-b2b.bigcommerce.com/api/v2/io/companies/4/force-del'                         --header 'authToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'
      - lang: Python
        source: |2

          import requests

          url = "https://api-b2b.bigcommerce.com/api/v2/io/companies/4/force-del"

          payload = {}
          headers = {
            'authToken': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'
          }

          response = requests.request("PUT", url, headers=headers, data = payload)

          print(response.text.encode('utf8'))
      - lang: JavaScript
        source: |2

          var myHeaders = new Headers();
          myHeaders.append("authToken", "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY");

          var requestOptions = {
            method: 'PUT',
            headers: myHeaders,
            redirect: 'follow'
          };

          fetch("https://api-b2b.bigcommerce.com/api/v2/io/companies/4/force-del", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
  /companies/{companyId}/orderBCIds:
    get:
      tags:
      - Company
      deprecated: true
      summary: Get BC Order Id List By Company Id
      description: Get bC order ID list by company id
      operationId: companies_orderBCIds_list
      parameters:
      - name: companyId
        in: path
        required: true
        schema:
          type: string
      - name: authToken
        in: header
        description: Auth token in header.
        required: true
        schema:
          type: string
      - name: offset
        in: query
        description: "Pagination offset default: 0"
        schema:
          type: number
      - name: limit
        in: query
        description: "Pagination limit default: 10"
        schema:
          type: number
      - name: beginDateAt
        in: query
        description: "End date filter, in format '12/31/2019'"
        schema:
          type: string
      - name: endDateAt
        in: query
        description: "End date filter, in format '12/31/2019'"
        schema:
          type: string
      responses:
        "200":
          description: Response Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      list:
                        type: array
                        description: ""
                        items:
                          type: object
                          properties:
                            orderId:
                              type: string
                              description: Order id
                      pagination:
                        type: object
                        properties:
                          limit:
                            type: number
                            description: Response pagination limit
                          offset:
                            type: number
                            description: Response pagination offset
                          totalCount:
                            type: number
                            description: Response data items number
                        description: Response data pagination
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                data:
                  list:
                  - orderId: "1"
                  pagination:
                    limit: 10
                    offset: 0
                    totalCount: 3
                message: Success
        "404":
          description: Not Found Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      errMsg:
                        type: string
                        description: Error message info
                    description: Response data
                  message:
                    type: string
                    description: Response message
                description: Response body
              example:
                code: 404
                data:
                  errMsg: Companies Does not Exist
                message: Not Found Error
      x-code-samples:
      - lang: Shell
        source: |2

          curl --location --request GET 'https://api-b2b.bigcommerce.com/api/v2/io/companies/4/orderBCIds'                         --header 'authToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'
      - lang: Python
        source: |2

          import requests

          url = "https://api-b2b.bigcommerce.com/api/v2/io/companies/4/orderBCIds"

          payload = {}
          headers = {
            'authToken': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'
          }

          response = requests.request("GET", url, headers=headers, data = payload)

          print(response.text.encode('utf8'))
      - lang: JavaScript
        source: |2

          var myHeaders = new Headers();
          myHeaders.append("authToken", "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY");

          var requestOptions = {
            method: 'GET',
            headers: myHeaders,
            redirect: 'follow'
          };

          fetch("https://api-b2b.bigcommerce.com/api/v2/io/companies/4/orderBCIds", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
  /companies/{companyId}/orders:
    get:
      tags:
      - Order
      deprecated: true
      summary: Get Company Orders
      description: "Get company all orders, with pagination data"
      operationId: companies_orders_list
      parameters:
      - name: companyId
        in: path
        required: true
        schema:
          type: string
      - name: authToken
        in: header
        description: Auth token in header.
        required: true
        schema:
          type: string
      - name: offset
        in: query
        description: "Pagination offset default: 0"
        schema:
          type: number
      - name: limit
        in: query
        description: "Pagination limit default: 10"
        schema:
          type: number
      - name: orderBy
        in: query
        description: "in ['bcOrderId', 'totalIncTax', 'createdAt']"
        schema:
          type: string
      - name: beginDateAt
        in: query
        description: "End date filter, in format '12/31/2019'"
        schema:
          type: string
      - name: endDateAt
        in: query
        description: "End date filter, in format '12/31/2019'"
        schema:
          type: string
      - name: includeExtra
        in: query
        description: "Switch show extra fields, allow: 0, 1"
        schema:
          type: string
      - name: channelId
        in: query
        description: BigComerce channel id
        schema:
          type: number
      responses:
        "200":
          description: Response Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      list:
                        type: array
                        items:
                          type: object
                          properties:
                            OrderStatus:
                              type: string
                              description: "Order status, eg. Awaiting Payment"
                            companyName:
                              type: string
                              description: User phone number
                            createdAt:
                              type: string
                              description: Order created date.
                            firstName:
                              type: string
                              description: Order's user first name.
                            isInvoiceOrder:
                              type: string
                              description: Is a invoice order
                            lastName:
                              type: string
                              description: Order's user last name
                            orderId:
                              type: string
                              description: Order id
                            totalIncTax:
                              type: string
                              description: Order's total invoice taxes.
                            updatedAt:
                              type: string
                              description: Order updated date.
                            channelName:
                              type: string
                              description: BigCommerce channel name
                            channelId:
                              type: string
                              description: BigCommerce channel id
                      pagination:
                        type: object
                        properties:
                          limit:
                            type: number
                            description: Response pagination limit
                          offset:
                            type: number
                            description: Response pagination offset
                          totalCount:
                            type: number
                            description: Response data items number
                        description: Response data pagination
                    description: Response data
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                data:
                  list:
                  - companyName: fkkfcctest
                    createdAt: "1572323610"
                    firstName: james
                    isInvoiceOrder: "0"
                    lastName: liu
                    orderId: "126"
                    orderStatus: Awaiting Payment
                    totalIncTax: "100.0000"
                    updatedAt: "1572323610"
                    channelId: 1
                    channelName: test
                  - companyName: fkkfcctest
                    createdAt: "1572323432"
                    firstName: james
                    isInvoiceOrder: "0"
                    lastName: liu
                    orderId: "124"
                    orderStatus: Awaiting Payment
                    totalIncTax: "50.0000"
                    updatedAt: "1572323432"
                    channelId: 1
                    channelName: test
                  - companyName: fkkfcctest
                    createdAt: "1572321777"
                    firstName: james
                    isInvoiceOrder: "0"
                    lastName: liu
                    orderId: "125"
                    orderStatus: Awaiting Payment
                    totalIncTax: "50.0000"
                    updatedAt: "1572321777"
                    channelId: 1
                    channelName: test
                  paginator:
                    limit: 10
                    offset: 0
                    totalCount: 3
                message: SUCCESS
        "404":
          description: Not Found Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      errMsg:
                        type: string
                        description: Error message info
                    description: Response data
                  message:
                    type: string
                    description: Response message
                description: Response body
              example:
                code: 404
                data:
                  errMsg: Companies Does not Exist
                message: Not Found Error
      x-code-samples:
      - lang: Shell
        source: |2

          curl --location --request GET 'https://api-b2b.bigcommerce.com/api/v2/io/companies/{companyId}/orders'                         --header 'authToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'
      - lang: Python
        source: |2

          import requests

          url = "https://api-b2b.bigcommerce.com/api/v2/io/companies/{companyId}/orders"

          payload = {}
          headers = {
            'authToken': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'
          }

          response = requests.request("GET", url, headers=headers, data = payload)

          print(response.text.encode('utf8'))
      - lang: JavaScript
        source: |2

          var myHeaders = new Headers();
          myHeaders.append("authToken", "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY");

          var requestOptions = {
            method: 'GET',
            headers: myHeaders,
            redirect: 'follow'
          };

          fetch("https://api-b2b.bigcommerce.com/api/v2/io/companies/{companyId}/orders", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
  /companies/{companyId}/payments:
    get:
      tags:
      - Payment
      deprecated: true
      summary: Get Company Payments Methods
      description: "Get company payments methods, include inactive"
      operationId: companies_payments_list
      parameters:
      - name: companyId
        in: path
        required: true
        schema:
          type: string
      - name: authToken
        in: header
        description: Auth token in header.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Response Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: array
                    description: ""
                    items:
                      type: object
                      properties:
                        code:
                          type: string
                          description: Payment code
                        isEnabled:
                          type: string
                          description: Payment method status
                        name:
                          type: string
                          description: Payment name
                        paymentId:
                          type: number
                          description: Payment id
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                data:
                - code: cheque
                  isEnabled: "1"
                  name: Check
                  paymentId: 3
                - code: bankdeposit
                  isEnabled: "0"
                  name: Bank Deposit
                  paymentId: 6
                - code: cod
                  isEnabled: "0"
                  name: Cash on Delivery
                  paymentId: 7
                - code: moneyorder
                  isEnabled: "0"
                  name: Money Order
                  paymentId: 8
                - code: testgateway
                  isEnabled: "0"
                  name: Test Payment Gateway
                  paymentId: 5
                message: SUCCESS
      x-code-samples:
      - lang: Shell
        source: |2

          curl --location --request GET 'https://api-b2b.bigcommerce.com/api/v2/io/companies/4/payments'                         --header 'authToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'
      - lang: Python
        source: |2

          import requests

          url = "https://api-b2b.bigcommerce.com/api/v2/io/companies/4/payments"

          payload = {}
          headers = {
            'authToken': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'
          }

          response = requests.request("GET", url, headers=headers, data = payload)

          print(response.text.encode('utf8'))
      - lang: JavaScript
        source: |2

          var myHeaders = new Headers();
          myHeaders.append("authToken", "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY");

          var requestOptions = {
            method: 'GET',
            headers: myHeaders,
            redirect: 'follow'
          };

          fetch("https://api-b2b.bigcommerce.com/api/v2/io/companies/4/payments", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
    put:
      tags:
      - Payment
      deprecated: true
      summary: Update Company Payments Methods
      description: "Update Company payments methods' status, change them active or\
        \ not"
      operationId: companies_payments_update
      parameters:
      - name: companyId
        in: path
        required: true
        schema:
          type: string
      - name: authToken
        in: header
        description: Auth token in header.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                payments:
                  type: array
                  items:
                    required:
                    - isEnabled
                    - paymentId
                    type: object
                    properties:
                      isEnabled:
                        type: string
                        description: "payment active or not('1' for active, others\
                          \ for inactive)"
                      paymentId:
                        type: string
                        description: Payment Id
              description: Request body
        required: true
      responses:
        "200":
          description: Response Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      companyId:
                        type: string
                        description: Updated company Id
                    description: Response data
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                data:
                  customerId: 2
                message: Success
        "400":
          description: Response Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status error code
                  data:
                    type: object
                    properties:
                      '[field]':
                        type: string
                        description: Message about problem with field 'field'
                    description: Response error data
                  message:
                    type: string
                    description: Response error message
                description: Response body
              example:
                code: 40010
                data:
                  payments:
                  - isEnabled:
                    - This field is required.
                message: Bad Request Error
        "404":
          description: Not Found Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      errMsg:
                        type: string
                        description: Error message info
                    description: Response data
                  message:
                    type: string
                    description: Response message
                description: Response body
              example:
                code: 404
                data:
                  errMsg: Companies Does not Exist
                message: Not Found Error
      x-code-samples:
      - lang: Shell
        source: |2

          curl --location --request PUT 'https://api-b2b.bigcommerce.com/api/v2/io/companies/4/payments'                         --header 'authToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'                         --header 'Content-Type: application/json'                         --data-raw '{
              "payments": [
                  {
                      "paymentId": "6",
                      "isEnabled": "1"
                  }
              ]
          }'
      - lang: Python
        source: |2

          import requests

          url = "https://api-b2b.bigcommerce.com/api/v2/io/companies/4/payments"
          payload = {
              "payments": [
                  {
                      "paymentId": "6",
                      "isEnabled": "1"
                  }
              ]
          }
          headers = {
            'authToken': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY',
            'Content-Type': 'application/json'
          }

          response = requests.request("PUT", url, headers=headers, data = payload)

          print(response.text.encode('utf8'))
      - lang: JavaScript
        source: |2

          var myHeaders = new Headers();
          myHeaders.append("authToken", "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY");
          myHeaders.append("Content-Type", "application/json");

          var raw = JSON.stringify({"payments":[{"paymentId":"6","isEnabled":"1"}]});

          var requestOptions = {
            method: 'PUT',
            headers: myHeaders,
            body: raw,
            redirect: 'follow'
          };

          fetch("https://api-b2b.bigcommerce.com/api/v2/io/companies/4/payments", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
      x-codegen-request-body-name: data
  /companies/{companyId}/sales-reps:
    get:
      tags:
      - SalesRep
      deprecated: true
      summary: Get Company Sales Reps
      description: Get company sales reps' basic info
      operationId: companies_sales-reps_list
      parameters:
      - name: companyId
        in: path
        required: true
        schema:
          type: string
      - name: authToken
        in: header
        description: Auth token in header.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Response Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      firstName:
                        type: string
                        description: Sales rep's first name
                      id:
                        type: string
                        description: Sales rep's Id
                      lastName:
                        type: string
                        description: Sales rep's last name
                    description: Response data
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                data:
                  firstName: kobe
                  id: "74"
                  lastName: tiantian
                message: Success
        "404":
          description: Not Found Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      errMsg:
                        type: string
                        description: Error message info
                    description: Response data
                  message:
                    type: string
                    description: Response message
                description: Response body
              example:
                code: 404
                data:
                  errMsg: Companies Does not Exist
                message: Not Found Error
      x-code-samples:
      - lang: Shell
        source: |2

          curl --location --request GET 'https://api-b2b.bigcommerce.com/api/v2/io/companies/4/sales-reps'                         --header 'authToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'
      - lang: Python
        source: |2

          import requests

          url = "https://api-b2b.bigcommerce.com/api/v2/io/companies/4/sales-reps"

          payload = {}
          headers = {
            'authToken': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'
          }

          response = requests.request("GET", url, headers=headers, data = payload)

          print(response.text.encode('utf8'))
      - lang: JavaScript
        source: |2

          var myHeaders = new Headers();
          myHeaders.append("authToken", "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY");

          var requestOptions = {
            method: 'GET',
            headers: myHeaders,
            redirect: 'follow'
          };

          fetch("https://api-b2b.bigcommerce.com/api/v2/io/companies/4/sales-reps", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
    put:
      tags:
      - SalesRep
      deprecated: true
      summary: Update Company Sales reps
      description: Update company reps
      operationId: companies_sales-reps_update
      parameters:
      - name: companyId
        in: path
        required: true
        schema:
          type: string
      - name: authToken
        in: header
        description: Auth token in header.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                salesReps:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        description: Sales rep's Id
              description: Request body
        required: true
      responses:
        "200":
          description: Response Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      companyId:
                        type: string
                        description: Updated company Id
                    description: Response data
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                data:
                  companyId: "2"
                message: Success
        "400":
          description: Response Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      '[field]':
                        type: string
                        description: "Message about problem with field [field]"
                    description: Response data
                  message:
                    type: string
                    description: Response message
                description: Response body
              example:
                code: 40010
                message: This field is required.
        "404":
          description: Not Found Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      errMsg:
                        type: string
                        description: Error message info
                    description: Response data
                  message:
                    type: string
                    description: Response message
                description: Response body
              example:
                code: 404
                data:
                  errMsg: Companies Does not Exist
                message: Not Found Error
      x-code-samples:
      - lang: Shell
        source: |2

          curl --location --request PUT 'https://api-b2b.bigcommerce.com/api/v2/io/companies/4/sales-reps'                         --header 'authToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'                         --header 'Content-Type: application/json'                         --data-raw '{
              "salesReps": [
                  {
                      "id": "74"
                  }
              ]
          }'
      - lang: Python
        source: |2

          import requests

          url = "https://api-b2b.bigcommerce.com/api/v2/io/companies/4/sales-reps"
          payload = {
              "salesReps": [
                  {
                      "id": "74"
                  }
              ]
          }
          headers = {
            'authToken': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY',
            'Content-Type': 'application/json'
          }

          response = requests.request("PUT", url, headers=headers, data = payload)

          print(response.text.encode('utf8'))
      - lang: JavaScript
        source: |2

          var myHeaders = new Headers();
          myHeaders.append("authToken", "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY");
          myHeaders.append("Content-Type", "application/json");

          var raw = JSON.stringify({"salesReps":[{"id":"74"}]});

          var requestOptions = {
            method: 'PUT',
            headers: myHeaders,
            body: raw,
            redirect: 'follow'
          };

          fetch("https://api-b2b.bigcommerce.com/api/v2/io/companies/4/sales-reps", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
      x-codegen-request-body-name: data
  /companies/{companyId}/user/{customerId}/orders:
    post:
      tags:
      - Order
      deprecated: true
      summary: Create An Order
      description: "Create an order from bigCommerce, you must known order id"
      operationId: companies_user_orders_create
      parameters:
      - name: companyId
        in: path
        required: true
        schema:
          type: string
      - name: customerId
        in: path
        required: true
        schema:
          type: string
      - name: authToken
        in: header
        description: Auth token in header.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              description: Request body
              allOf:
              - required:
                - orderId
                - totalIncTax
                type: object
                properties:
                  orderId:
                    type: string
                    description: BigCommerce order id
                  poNumber:
                    type: string
                    description: PoNumber
                  totalIncTax:
                    type: number
                    description: Total incTax
        required: true
      responses:
        "200":
          description: Response Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      orderId:
                        type: string
                        description: Created order id
                    description: Response data
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                data:
                  orderId: 2
                message: Success
        "400":
          description: Response Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status error code
                  data:
                    type: object
                    properties:
                      '[field]':
                        type: string
                        description: Message about problem with field 'field'
                    description: Response error data
                  message:
                    type: string
                    description: Response error message
                description: Response body
              example:
                code: 40010
                data:
                  bc_order_id: orderId can not be null
                message: Bad Request Error
        "404":
          description: Not Found Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      errMsg:
                        type: string
                        description: Error message info
                    description: Response data
                  message:
                    type: string
                    description: Response message
                description: Response body
              example:
                code: 404
                data:
                  errMsg: Companies Does not Exist
                message: Not Found Error
      x-code-samples:
      - lang: Shell
        source: "\ncurl --location --request POST 'https://api-b2b.bigcommerce.com/api/v2/io/companies/4/user/12/orders'\
          \                         --header 'authToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'\
          \                         --header 'Content-Type: application/json'    \
          \                     --data-raw '{\n    \"totalIncTax\": \"111\",\n   \
          \ \"orderId\": \"111\"\n}' \n"
      - lang: Python
        source: |2

          import requests

          url = "https://api-b2b.bigcommerce.com/api/v2/io/companies/4/user/12/orders"

          payload = {
              "totalIncTax": "111",
              "orderId": "111"
          }
          headers = {
            'authToken': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY',
            'Content-Type': 'application/json'
          }

          response = requests.request("POST", url, headers=headers, data = payload)

          print(response.text.encode('utf8'))
      - lang: JavaScript
        source: |2

          var myHeaders = new Headers();
          myHeaders.append("authToken", "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY");
          myHeaders.append("Content-Type", "application/json");

          var raw = JSON.stringify({"totalIncTax":"111","orderId":"111"});

          var requestOptions = {
            method: 'POST',
            headers: myHeaders,
            body: raw,
            redirect: 'follow'
          };

          fetch("https://api-b2b.bigcommerce.com/api/v2/io/companies/4/user/12/orders", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
      x-codegen-request-body-name: data
  /companies/{companyId}/user/{userId}:
    put:
      tags:
      - User
      deprecated: true
      summary: Update A Company User
      description: Update a company user info
      operationId: companies_user_update
      parameters:
      - name: companyId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: authToken
        in: header
        description: Auth token in header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - type: object
                properties:
                  firstName:
                    type: string
                  lastName:
                    type: string
                  phone:
                    type: string
                  email:
                    type: string
                  uuid:
                    type: string
                  userRole:
                    type: string
                  acceptWelcomeEmail:
                    type: string
                  channelIds:
                    type: array
                    description: BigCommerce channel id list.
                    items:
                      type: integer
                  companyRoleId:
                    type: integer
                    description: "The company role id. This field is only applicable\
                      \ to the company's RBAC feature. If your store doesn't utilize\
                      \ this feature, please do not use this field. When it has a\
                      \ value, it will override the value of the userRole field."
                    x-stoplight:
                      id: kac8dnjf5qza1
              - $ref: '#/components/schemas/extra_field_values'
        required: false
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      customerId:
                        type: integer
                      userId:
                        type: integer
                    description: Response data
                  message:
                    type: string
                    description: Response message
      x-codegen-request-body-name: body
  /companies/{companyId}/users:
    get:
      tags:
      - User
      deprecated: true
      summary: Get Company Users
      description: "Get company users, with pagination data"
      operationId: companies_users_list
      parameters:
      - name: companyId
        in: path
        required: true
        schema:
          type: string
      - name: authToken
        in: header
        description: Auth token in header.
        required: true
        schema:
          type: string
      - name: offset
        in: query
        description: "Pagination offset default: 0"
        schema:
          type: number
      - name: limit
        in: query
        description: "Pagination limit default: 10"
        schema:
          type: number
      - name: "role[]"
        in: query
        description: "user role(0=admin 1=senior_buyer 2=junior_buyer 3=sales_rep)\
          \ eg. role[]=1, 2"
        schema:
          type: string
      - name: isIncludeExtraFields
        in: query
        description: 0 or 1
        schema:
          type: string
      responses:
        "200":
          description: Response Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      list:
                        type: array
                        items:
                          type: object
                          allOf:
                          - type: object
                            properties:
                              catalogId:
                                type: string
                                description: Catalog Id
                              createdAt:
                                type: string
                                description: User create time
                              email:
                                type: string
                                description: User email
                              firstName:
                                type: string
                                description: User's first name
                              id:
                                type: string
                                description: User Id
                              lastName:
                                type: string
                                description: User's last name
                              phoneNumber:
                                type: string
                                description: User phone number
                              role:
                                type: string
                                description: user role (0=admin 1=senior_buyer 2=junior_buyer
                                  3=sales_rep)
                              updatedAt:
                                type: string
                                description: user update time
                              uuid:
                                type: string
                                description: user UUID
                              channelList:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    channelId:
                                      type: integer
                                      description: BigCommerce channel id
                                    channelName:
                                      type: string
                                      description: Channel name
                                    iconUrl:
                                      type: string
                                      description: Channel icon url
                              companyRoleId:
                                type: integer
                                description: "The company role id. This field is only\
                                  \ applicable to the company's RBAC feature. If your\
                                  \ store doesn't utilize this feature, please do\
                                  \ not use this field."
                                x-stoplight:
                                  id: iz7buf5a5b5bq
                              companyRoleName:
                                type: string
                                description: "The company role name. This field is\
                                  \ only applicable to the company's RBAC feature.\
                                  \ If your store doesn't utilize this feature, please\
                                  \ do not use this field."
                                x-stoplight:
                                  id: jfmg9izfe2w7t
                          - $ref: '#/components/schemas/extra_field_values'
                      pagination:
                        type: object
                        properties:
                          limit:
                            type: number
                            description: Response pagination limit
                          offset:
                            type: number
                            description: Response pagination offset
                          totalCount:
                            type: number
                            description: Response data items number
                        description: Response data pagination
                    description: Response data
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                data:
                  list:
                  - catalogId: "1"
                    createdAt: "1574999690"
                    email: test323@test.com
                    firstName: test
                    id: "123"
                    lastName: test2
                    phoneNumber: ""
                    role: "1"
                    updatedAt: "1574999690"
                    uuid: A123456
                    channelList: []
                  pagination:
                    limit: 10
                    offset: 0
                    totalCount: 1
                message: SUCCESS
        "404":
          description: Not Found Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      errMsg:
                        type: string
                        description: Error message info
                    description: Response data
                  message:
                    type: string
                    description: Response message
                description: Response body
              example:
                code: 404
                data:
                  errMsg: Companies Does not Exist
                message: Not Found Error
      x-code-samples:
      - lang: Shell
        source: |2

          curl --location --request GET 'https://api-b2b.bigcommerce.com/api/v2/io/companies/4/users?role[]=1,2'                         --header 'authToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'
      - lang: Python
        source: |2

          import requests

          url = "https://api-b2b.bigcommerce.com/api/v2/io/companies/4/users?role[]=1,2"

          payload = {}
          headers = {
            'authToken': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'
          }

          response = requests.request("GET", url, headers=headers, data = payload)

          print(response.text.encode('utf8'))
      - lang: JavaScript
        source: |2

          var myHeaders = new Headers();
          myHeaders.append("authToken", "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY");

          var requestOptions = {
            method: 'GET',
            headers: myHeaders,
            redirect: 'follow'
          };

          fetch("https://api-b2b.bigcommerce.com/api/v2/io/companies/4/users?role[]=1,2", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
    put:
      tags:
      - User
      deprecated: true
      summary: Update Company User
      description: "Update company user's field, user identified by email field.fields\
        \ can not omit"
      operationId: companies_users_update_or_create
      parameters:
      - name: companyId
        in: path
        required: true
        schema:
          type: string
      - name: authToken
        in: header
        description: Auth token in header.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - required:
                - email
                - firstName
                - lastName
                type: object
                properties:
                  acceptWelcomeEmail:
                    type: string
                    description: (0=will not receive email 1=will receive email)
                    enum:
                    - "0"
                    - "1"
                  email:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  phone:
                    type: string
                  userRole:
                    type: string
                    description: user role(0=admin 1=senior_buyer 2=junior_buyer 3=sales_rep)
                  uuid:
                    type: string
                  channelIds:
                    type: array
                    description: BigCommerce channel id list
                    items:
                      type: integer
                  companyRoleId:
                    type: integer
                    description: "The company role id. This field is only applicable\
                      \ to the company's RBAC feature. If your store doesn't utilize\
                      \ this feature, please do not use this field. When it has a\
                      \ value, it will override the value of the userRole field."
                    x-stoplight:
                      id: apzeyjj6m09cp
              - $ref: '#/components/schemas/extra_field_values'
        required: true
      responses:
        "200":
          description: Response Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      customerId:
                        type: string
                        description: Created bc customer Id
                      userId:
                        type: string
                        description: Created user Id
                    description: Response data
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                data:
                  customerId: "2"
                  userId: "2"
                message: Success
        "400":
          description: Response Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties: {}
                    description: Response data
                  message:
                    type: string
                    description: Response message
                description: Response body
              example:
                code: 10012
                data: {}
                message: PARAMETER VALUE ERROR
        "404":
          description: Not Found Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      errMsg:
                        type: string
                        description: Error message info
                    description: Response data
                  message:
                    type: string
                    description: Response message
                description: Response body
              example:
                code: 404
                data:
                  errMsg: Companies Does not Exist
                message: Not Found Error
      x-code-samples:
      - lang: Shell
        source: |2

          curl --location --request PUT 'https://api-b2b.bigcommerce.com/api/v2/io/companies/4/users'                         --header 'authToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'                         --header 'Content-Type: application/json'                         --data-raw '{
              "firstName": "test",
              "lastName": "test2",
              "email": "test323@test.com",
              "userRole": 1
          }'
      - lang: Python
        source: |2

          import requests

          url = "https://api-b2b.bigcommerce.com/api/v2/io/companies/4/users"

          payload = {
              "firstName": "test",
              "lastName": "test2",
              "email": "test323@test.com",
              "userRole": 1
          }
          headers = {
            'authToken': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY',
            'Content-Type': 'application/json'
          }

          response = requests.request("PUT", url, headers=headers, data = payload)

          print(response.text.encode('utf8'))
      - lang: JavaScript
        source: |2

          var myHeaders = new Headers();
          myHeaders.append("authToken", "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY");
          myHeaders.append("Content-Type", "application/json");

          var raw = JSON.stringify({"firstName":"test","lastName":"test2","email":"test323@test.com","userRole":1});

          var requestOptions = {
            method: 'PUT',
            headers: myHeaders,
            body: raw,
            redirect: 'follow'
          };

          fetch("https://api-b2b.bigcommerce.com/api/v2/io/companies/4/users", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
      x-codegen-request-body-name: data
    post:
      tags:
      - User
      deprecated: true
      summary: Create A Company User
      description: "Create a company user, which belongs company"
      operationId: companies_users_create
      parameters:
      - name: companyId
        in: path
        required: true
        schema:
          type: string
      - name: authToken
        in: header
        description: Auth token in header.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - required:
                - email
                - firstName
                - lastName
                - phone
                type: object
                properties:
                  acceptWelcomeEmail:
                    type: string
                    description: (0=will not receive email 1=will receive email)
                    enum:
                    - "0"
                    - "1"
                  email:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  phone:
                    type: string
                  userRole:
                    type: string
                    description: user role(0=admin 1=senior_buyer 2=junior_buyer 3=sales_rep)
                  uuid:
                    type: string
                  channelIds:
                    type: array
                    description: BigCommerce channel id list
                    items:
                      type: integer
                  originChannelId:
                    type: integer
                    description: "BigCommerce channel id, used for BigCommerce customer\
                      \ origin channel id. This field takes effect only when the store\
                      \ default b2b channel is not configured"
                  companyRoleId:
                    type: integer
                    description: "The company role id. This field is only applicable\
                      \ to the company's RBAC feature. If your store doesn't utilize\
                      \ this feature, please do not use this field. When it has a\
                      \ value, it will override the value of the userRole field."
                    x-stoplight:
                      id: 1qhsxeqqydfte
              - $ref: '#/components/schemas/extra_field_values'
        required: true
      responses:
        "200":
          description: Response Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      customerId:
                        type: string
                        description: Created bc customer Id
                      userId:
                        type: string
                        description: Created user Id
                    description: Response data
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                data:
                  customerId: "2"
                  userId: "2"
                message: Success
        "400":
          description: Response Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties: {}
                    description: Response data
                  message:
                    type: string
                    description: Response message
                description: Response body
              example:
                code: 10012
                data: {}
                message: PARAMETER VALUE ERROR
        "404":
          description: Not Found Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      errMsg:
                        type: string
                        description: Error message info
                    description: Response data
                  message:
                    type: string
                    description: Response message
                description: Response body
              example:
                code: 404
                data:
                  errMsg: Companies Does not Exist
                message: Not Found Error
      x-code-samples:
      - lang: Shell
        source: |2

          curl --location --request POST 'https://api-b2b.bigcommerce.com/api/v2/io/companies/4/users'                         --header 'authToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'                         --header 'Content-Type: application/json'                         --data-raw '{
              "firstName": "test",
              "lastName": "test2",
              "email": "test323@test.com",
              "phone": "122331212",
              "userRole": 1
          }'
      - lang: Python
        source: |2

          import requests

          url = "https://api-b2b.bigcommerce.com/api/v2/io/companies/4/users"

          payload = {
              "firstName": "test",
              "lastName": "test2",
              "email": "test323@test.com",
              "phone": "122331212",
              "userRole": 1
          }
          headers = {
            'authToken': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY',
            'Content-Type': 'application/json'
          }

          response = requests.request("POST", url, headers=headers, data = payload)

          print(response.text.encode('utf8'))
      - lang: JavaScript
        source: |2

          var myHeaders = new Headers();
          myHeaders.append("authToken", "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY");
          myHeaders.append("Content-Type", "application/json");

          var raw = JSON.stringify({"firstName":"test","lastName":"test2","email":"test323@test.com","phone":"122331212","userRole":1});

          var requestOptions = {
            method: 'POST',
            headers: myHeaders,
            body: raw,
            redirect: 'follow'
          };

          fetch("https://api-b2b.bigcommerce.com/api/v2/io/companies/4/users", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
      x-codegen-request-body-name: data
  /companies/{companyId}/users/bulk_create:
    post:
      tags:
      - User
      deprecated: true
      summary: Bulk Create Company User
      description: Create company users in batch
      operationId: companies_users_bulk_create_create
      parameters:
      - name: companyId
        in: path
        required: true
        schema:
          type: string
      - name: authToken
        in: header
        description: Auth token in header.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                acceptWelcomeEmail:
                  type: string
                  description: (0=will not receive email 1=will receive email)
                  enum:
                  - "0"
                  - "1"
                users:
                  type: array
                  items:
                    type: object
                    allOf:
                    - required:
                      - email
                      - firstName
                      - lastName
                      - phone
                      type: object
                      properties:
                        email:
                          type: string
                        firstName:
                          type: string
                        lastName:
                          type: string
                        phone:
                          type: string
                        userRole:
                          type: string
                          description: user role(0=admin 1=senior_buyer 2=junior_buyer
                            3=sales_rep)
                        channelIds:
                          type: array
                          description: BigCommerce channel id list
                          items:
                            type: integer
                        originChannelId:
                          type: integer
                          description: "BigCommerce channel id, used for BigCommerce\
                            \ customer origin channel id. This field takes effect\
                            \ only when the store default b2b channel is not configured"
                        companyRoleId:
                          type: integer
                          description: "The company role id. This field is only applicable\
                            \ to the company's RBAC feature. If your store doesn't\
                            \ utilize this feature, please do not use this field.\
                            \ When it has a value, it will override the value of the\
                            \ userRole field."
                          x-stoplight:
                            id: y177z48133txw
                    - $ref: '#/components/schemas/extra_field_values'
              description: Request body
        required: true
      responses:
        "200":
          description: Response Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      failedItems:
                        type: array
                        items:
                          type: object
                          properties:
                            email:
                              type: string
                              description: Created user email
                            firstName:
                              type: string
                              description: Created user's first name
                            lastName:
                              type: string
                              description: Created user's last name
                            phone:
                              type: string
                              description: Created user phone
                            userRole:
                              type: number
                              description: Created user role
                      successfulItems:
                        type: array
                        items:
                          type: object
                          properties:
                            customerId:
                              type: number
                              description: Created customer Id
                            email:
                              type: string
                              description: Created user email
                            firstName:
                              type: string
                              description: Created user's first name
                            lastName:
                              type: string
                              description: Created user's last name
                            phone:
                              type: string
                              description: Created user phone
                            userRole:
                              type: number
                              description: Created user role
                    description: Response data
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                data:
                  failedItems: []
                  successfulItems:
                  - customerId: 2
                    email: test323@test121.com
                    firstName: test11
                    lastName: test2
                    phone: "122331211"
                    userRole: 1
                  - customerId: 2
                    email: test323@test22.com
                    firstName: test12
                    lastName: test2
                    phone: "122331212"
                    userRole: 1
                message: Success
        "400":
          description: Response Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties: {}
                    description: Response data
                  message:
                    type: string
                    description: Response message
                description: Response body
              example:
                code: 10012
                data: {}
                message: PARAMETER VALUE ERROR
        "404":
          description: Not Found Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      errMsg:
                        type: string
                        description: Error message info
                    description: Response data
                  message:
                    type: string
                    description: Response message
                description: Response body
              example:
                code: 404
                data:
                  errMsg: Companies Does not Exist
                message: Not Found Error
      x-code-samples:
      - lang: Shell
        source: |2

          curl --location --request POST 'https://api-b2b.bigcommerce.com/api/v2/io/companies/4/users/bulk_create'                         --header 'authToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'                         --header 'Content-Type: application/json'                         --data-raw '{
              "users": [
                  {
                      "firstName": "test11",
                      "lastName": "test2",
                      "email": "test323@test11.com",
                      "phone": "122331211",
                      "userRole": 1
                  },
                  {
                      "firstName": "test12",
                      "lastName": "test2",
                      "email": "test323@test12.com",
                      "phone": "122331212",
                      "userRole": 1
                  }
              ]
          }'
      - lang: Python
        source: |2

          import requests

          url = "https://api-b2b.bigcommerce.com/api/v2/io/companies/4/users/bulk_create"

          payload = {
              "users": [
                  {
                      "firstName": "test11",
                      "lastName": "test2",
                      "email": "test323@test11.com",
                      "phone": "122331211",
                      "userRole": 1
                  },
                  {
                      "firstName": "test12",
                      "lastName": "test2",
                      "email": "test323@test12.com",
                      "phone": "122331212",
                      "userRole": 1
                  }
              ]
          }
          headers = {
            'authToken': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY',
            'Content-Type': 'application/json'
          }

          response = requests.request("POST", url, headers=headers, data = payload)

          print(response.text.encode('utf8'))
      - lang: JavaScript
        source: |2

          var myHeaders = new Headers();
          myHeaders.append("authToken", "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY");
          myHeaders.append("Content-Type", "application/json");

          var raw = JSON.stringify({"users":[{"firstName":"test11","lastName":"test2","email":"test323@test11.com","phone":"122331211","userRole":1},{"firstName":"test12","lastName":"test2","email":"test323@test12.com","phone":"122331212","userRole":1}]});

          var requestOptions = {
            method: 'POST',
            headers: myHeaders,
            body: raw,
            redirect: 'follow'
          };

          fetch("https://api-b2b.bigcommerce.com/api/v2/io/companies/4/users/bulk_create", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
      x-codegen-request-body-name: data
  /companies/{companyId}/users/{customerId}:
    get:
      tags:
      - User
      deprecated: true
      summary: Get A Company User
      description: "Get a company user's info, by company and customer id"
      operationId: companies_users_read
      parameters:
      - name: companyId
        in: path
        required: true
        schema:
          type: string
      - name: customerId
        in: path
        required: true
        schema:
          type: string
      - name: authToken
        in: header
        description: Auth token in header.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Response Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    allOf:
                    - type: object
                      properties:
                        catalogId:
                          type: string
                          description: Catalog Id
                        createdAt:
                          type: string
                          description: User create time
                        email:
                          type: string
                          description: User email
                        firstName:
                          type: string
                          description: User's first name
                        id:
                          type: string
                          description: User Id
                        lastName:
                          type: string
                          description: User's last name
                        phoneNumber:
                          type: string
                          description: User phone number
                        role:
                          type: string
                          description: user role (0=admin 1=senior_buyer 2=junior_buyer
                            3=sales_rep)
                        updatedAt:
                          type: string
                          description: user update time
                        uuid:
                          type: string
                          description: user UUID
                        channelList:
                          type: array
                          items:
                            type: object
                            properties:
                              channelId:
                                type: integer
                                description: BigCommerce channel id
                              channelName:
                                type: string
                                description: Channel name
                              iconUrl:
                                type: string
                                description: Channel icon url
                        companyRoleId:
                          type: integer
                          description: "The company role id. This field is only applicable\
                            \ to the company's RBAC feature. If your store doesn't\
                            \ utilize this feature, please do not use this field."
                          x-stoplight:
                            id: 6ocmpffb3ywgh
                        companyRoleName:
                          type: string
                          description: "The company role name. This field is only\
                            \ applicable to the company's RBAC feature. If your store\
                            \ doesn't utilize this feature, please do not use this\
                            \ field."
                          x-stoplight:
                            id: 8853bn9ijoqey
                    - $ref: '#/components/schemas/extra_field_values'
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                data:
                  catalogId: "1"
                  createdAt: "1574999690"
                  email: test323@test.com
                  firstName: test
                  id: "123"
                  lastName: test2
                  phoneNumber: ""
                  role: "1"
                  updatedAt: "1574999690"
                  uuid: A123456
                  channelList: []
                message: SUCCESS
        "404":
          description: Not Found Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      errMsg:
                        type: string
                        description: Error message info
                    description: Response data
                  message:
                    type: string
                    description: Response message
                description: Response body
              example:
                code: 404
                data:
                  errMsg: Companies Does not Exist
                message: Not Found Error
      x-code-samples:
      - lang: Shell
        source: |2

          curl --location --request GET 'https://api-b2b.bigcommerce.com/api/v2/io/companies/4/users'                         --header 'authToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'
      - lang: Python
        source: |2

          import requests

          url = "https://api-b2b.bigcommerce.com/api/v2/io/companies/4/users"

          payload = {}
          headers = {
            'authToken': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'
          }

          response = requests.request("GET", url, headers=headers, data = payload)

          print(response.text.encode('utf8'))
      - lang: JavaScript
        source: |2

          var myHeaders = new Headers();
          myHeaders.append("authToken", "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY");

          var requestOptions = {
            method: 'GET',
            headers: myHeaders,
            redirect: 'follow'
          };

          fetch("https://api-b2b.bigcommerce.com/api/v2/io/companies/4/users", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
    delete:
      tags:
      - User
      deprecated: true
      summary: Delete A Company User
      description: "Delete a company user, if this user is the only one administrator\
        \ of company, will return a 500 Error"
      operationId: companies_users_delete
      parameters:
      - name: companyId
        in: path
        required: true
        schema:
          type: string
      - name: customerId
        in: path
        required: true
        schema:
          type: string
      - name: authToken
        in: header
        description: Auth token in header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Deleted successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      customerId:
                        type: string
                        description: Deleted user Id
                    description: Response data
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                data:
                  customerId: 2
                message: Success
        "404":
          description: Company not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties: {}
                    description: Response data
                  message:
                    type: string
                    description: Response message
                description: Response body
              example:
                code: 404
                data:
                  errMsg: Companies Does not Exist
                message: Not Found Error
      x-code-samples:
      - lang: Shell
        source: |2

          curl --location --request DELETE 'https://api-b2b.bigcommerce.com/api/v2/io/companies/4/users/15'                         --header 'authToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'
      - lang: Python
        source: |2

          import requests

          url = "https://api-b2b.bigcommerce.com/api/v2/io/companies/4/users/15"

          payload = {}
          headers = {
            'authToken': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'
          }

          response = requests.request("DELETE", url, headers=headers, data = payload)

          print(response.text.encode('utf8'))
      - lang: JavaScript
        source: |2

          var myHeaders = new Headers();
          myHeaders.append("authToken", "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY");

          var requestOptions = {
            method: 'DELETE',
            headers: myHeaders,
            redirect: 'follow'
          };

          fetch("https://api-b2b.bigcommerce.com/api/v2/io/companies/4/users/15", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
  /orders:
    put:
      tags:
      - Order
      deprecated: true
      summary: Update Company Order With BC OrderId
      description: "Update order, billingAddress and products can not be omitted.\
        \ products can be two format. \n 1. Product with variants. \n 2. Base product"
      operationId: orders_update
      parameters:
      - name: authToken
        in: header
        description: Auth token in header.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                baseHandlingCost:
                  type: string
                  description: "The value of the base handling cost. (Float, Float-As-String,\
                    \ Integer)."
                baseShippingCost:
                  type: string
                  description: "The value of the base shipping cost. (Float, Float-As-String,\
                    \ Integer)"
                baseWrappingCost:
                  type: string
                  description: "The value of the base wrapping cost. (Float, Float-As-String,\
                    \ Integer)."
                billingAddress:
                  type: object
                  properties:
                    city:
                      type: string
                    company:
                      type: string
                      description: Company name
                    country:
                      type: string
                      description: Human readable country name
                    countryIso2:
                      type: string
                      description: Country ISO info.
                    email:
                      type: string
                      description: Address email.
                    firstName:
                      type: string
                      description: Address first name
                    formFields:
                      type: string
                      description: Address form fields.
                    lastName:
                      type: string
                      description: Address last name
                    phone:
                      type: string
                      description: Address phone number
                    state:
                      type: string
                      description: Human readable state (or other subdivision) name
                    streetOne:
                      type: string
                      description: Typically the street address
                    streetTwo:
                      type: string
                      description: "More detailed information about where to deliver\
                        \ mail, such as a suite or office number"
                    zip:
                      type: string
                channelId:
                  type: string
                  description: BigCommerce channel id. Shows where the order originated.
                    The channel_id will default to 1.
                creditCardType:
                  type: string
                  description: Credit card type.
                customerMessage:
                  type: string
                  description: "Message that the customer entered (number, optiona)\
                    \ -o the Order Comments box during checkout."
                dateCreated:
                  type: string
                  description: Date created.
                discountAmount:
                  type: string
                  description: "Amount of discount for this transaction. (Float, Float-As-String,\
                    \ Integer)"
                ebayOrderId:
                  type: string
                  description: "If the order was placed through eBay, the eBay order\
                    \ number will be included. Otherwise, the value will be 0."
                externalId:
                  type: string
                  description: "ID of the order in another system. For example, the\
                    \ Amazon Order ID if this is an Amazon order.This field can be\
                    \ updated in a /POST, but using a /PUT to update the order will\
                    \ return a 400 error. The field ‘external_id’ cannot be written\
                    \ to. Please remove it from your request before trying again.\
                    \ It can not be overwritten once set.."
                externalMerchantId:
                  type: string
                  description: Id of the external merchant.
                externalSource:
                  type: string
                  description: "For orders submitted or modified via the API, using\
                    \ a PUT or POST operation, you can optionally pass in a value\
                    \ identifying the system used to generate the order. For example:\
                    \ POS. Otherwise, the value will be null."
                geoipCountry:
                  type: string
                  description: "The full name of the country where the customer made\
                    \ the purchase, based on the IP."
                geoipCountryIso2:
                  type: string
                  description: "The country where the customer made the purchase,\
                    \ in ISO2 format, based on the IP."
                giftCertificateAmount:
                  type: string
                  description: "A read-only value. Do not pass in a POST or PUT. (Float,\
                    \ Float-As-String, Integer)"
                handlingCostExTax:
                  type: string
                  description: "The value of the handling cost, excluding tax. (Float,\
                    \ Float-As-String, Integer)"
                handlingCostIncTax:
                  type: string
                  description: "The value of the handling cost, including tax. (Float,\
                    \ Float-As-String, Integer)."
                ipAddress:
                  type: string
                  description: "IP Address of the customer, if known."
                isDeleted:
                  type: string
                  description: "Indicates whether the order was deleted (archived).\
                    \ Set to to true, to archive an order."
                itemsShipped:
                  type: string
                  description: The number of items that have been shipped.
                itemsTotal:
                  type: string
                  description: The total number of items in the order.
                orderId:
                  type: string
                  description: BigCommerce order id
                orderIsDigital:
                  type: string
                  description: Whether this is an order for digital products.
                paymentMethod:
                  type: string
                  description: "The payment method for this order. Can be one of the\
                    \ following: Manual, Credit Card, cash, Test Payment Gateway,\
                    \ etc."
                paymentProviderId:
                  type: string
                  description: The external Transaction ID/Payment ID within this
                    order’s payment provider (if a payment provider was used).
                poNumber:
                  type: string
                  description: PoNumber
                products:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      priceExTax:
                        type: string
                      priceIncTax:
                        type: string
                      productId:
                        type: string
                        description: Product id.
                      productOptions:
                        type: string
                      quantity:
                        type: string
                      sku:
                        type: string
                      upc:
                        type: string
                      variantId:
                        type: string
                refundedAmount:
                  type: string
                  description: "The amount refunded from this transaction. (Float,\
                    \ Float-As-String, Integer)"
                shippingCostExTax:
                  type: string
                  description: "The value of shipping cost, excluding tax. (Float,\
                    \ Float-As-String, Integer)."
                shippingCostIncTax:
                  type: string
                  description: "The value of shipping cost, including tax. (Float,\
                    \ Float-As-String, Integer)."
                staffNotes:
                  type: string
                  description: Any additional notes for staff.
                statusId:
                  type: string
                  description: The status ID of the order.
                subtotalExTax:
                  type: string
                  description: "Override value for subtotal excluding tax. If specified,\
                    \ the field subtotal_inc_tax is also required. (Float, Float-As-String,\
                    \ Integer)"
                subtotalIncTax:
                  type: string
                  description: "TOverride value for subtotal including tax. If specified,\
                    \ the field subtotal_ex_tax is also required. (Float, Float-As-String,\
                    \ Integer)"
                taxProviderId:
                  type: string
                  description: Tax provider id.
                totalExTax:
                  type: string
                  description: "Override value for the total, excluding tax. If specified,\
                    \ the field total_inc_tax is also required. (Float, Float-As-String,\
                    \ Integer)"
                wrappingCostExTax:
                  type: string
                  description: "The value of the wrapping cost, excluding tax. (Float,\
                    \ Float-As-String, Integer)."
                wrappingCostIncTax:
                  type: string
                  description: "The value of the wrapping cost, including tax. (Float,\
                    \ Float-As-String, Integer)."
              description: Request body
        required: true
      responses:
        "200":
          description: Response Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      companyId:
                        type: string
                        description: Updated order id
                    description: Response data
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                data:
                  orderId: 2
                message: Success
        "400":
          description: Response Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status error code
                  data:
                    type: object
                    properties:
                      errMsg:
                        type: string
                        description: Error Message
                    description: Response error data
                  message:
                    type: string
                    description: Response error message
                description: Response body
              example:
                code: 40010
                data:
                  errMsg: bc internal server error
                message: Bad Requests Error
        "404":
          description: Not Found Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      errMsg:
                        type: string
                        description: Error message info
                    description: Response data
                  message:
                    type: string
                    description: Response message
                description: Response body
              example:
                code: 404
                data:
                  errMsg: Companies Does not Exist
                message: Not Found Error
      x-code-samples:
      - lang: Shell
        source: |2

          curl --location --request PUT 'https://api-b2b.bigcommerce.com/api/v2/io/orders'                         --header 'authToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'                         --header 'Content-Type: application/json'                         --data-raw '{
              "orderId": 117,
              "statusId": 0,
              "billingAddress": {
                  "firstName": "Jane",
                  "lastName": "Doe",
                  "streetOne": "123 Main Street",
                  "city": "Austin",
                  "state": "Texas",
                  "zip": "78751",
                  "country": "United States",
                  "countryIso2": "US",
                  "email": "janedoe@email.com"
              },
              "products": [
                  {
                      "name": "BigCommerce Poster",
                      "quantity": 1,
                      "priceIncTax": 10.98,
                      "priceExTax": 10
                  },
                  {
                      "name": "BigCommerce Coffee Mug",
                      "quantity": 1,
                      "priceIncTax": 50,
                      "priceExTax": 45
                  }
              ]
          }'
      - lang: Python
        source: |2

          import requests

          url = "https://api-b2b.bigcommerce.com/api/v2/io/orders"
          payload = {
              "orderId": 117,
              "statusId": 0,
              "billingAddress": {
                  "firstName": "Jane",
                  "lastName": "Doe",
                  "streetOne": "123 Main Street",
                  "city": "Austin",
                  "state": "Texas",
                  "zip": "78751",
                  "country": "United States",
                  "countryIso2": "US",
                  "email": "janedoe@email.com"
              },
              "products": [
                  {
                      "name": "BigCommerce Poster",
                      "quantity": 1,
                      "priceIncTax": 10.98,
                      "priceExTax": 10
                  },
                  {
                      "name": "BigCommerce Coffee Mug",
                      "quantity": 1,
                      "priceIncTax": 50,
                      "priceExTax": 45
                  }
              ]
          }
          headers = {
            'authToken': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY',
            'Content-Type': 'application/json'
          }

          response = requests.request("PUT", url, headers=headers, data = payload)

          print(response.text.encode('utf8'))
      - lang: JavaScript
        source: |2

          var myHeaders = new Headers();
          myHeaders.append("authToken", "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY");
          myHeaders.append("Content-Type", "application/json");

          var raw = JSON.stringify({"orderId":117,"statusId":0,"billingAddress":{"firstName":"Jane","lastName":"Doe","streetOne":"123 Main Street","city":"Austin","state":"Texas","zip":"78751","country":"United States","countryIso2":"US","email":"janedoe@email.com"},"products":[{"name":"BigCommerce Poster","quantity":1,"priceIncTax":10.98,"priceExTax":10},{"name":"BigCommerce Coffee Mug","quantity":1,"priceIncTax":50,"priceExTax":45}]});

          var requestOptions = {
            method: 'PUT',
            headers: myHeaders,
            body: raw,
            redirect: 'follow'
          };

          fetch("https://api-b2b.bigcommerce.com/api/v2/io/orders", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
      x-codegen-request-body-name: data
  /orders/company:
    put:
      tags:
      - Order
      deprecated: true
      summary: Update B2BE User's Orders' company attribute.
      description: Update the orders belong to a B2BE company to another B2BE company.
      operationId: orders_company_update
      parameters:
      - name: authToken
        in: header
        description: Auth token in header.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
              - customerGroupID
              - customerID
              type: object
              properties:
                customerGroupID:
                  type: string
                  description: BigCommerce customer group id.
                customerID:
                  type: string
                  description: BigCommerce user id.
              description: Request body
        required: true
      responses:
        "200":
          description: Response Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties: {}
                    description: Response data
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                data: {}
                message: Success
        "400":
          description: Response Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status error code
                  data:
                    type: object
                    properties:
                      '[field]':
                        type: string
                        description: Message about problem with field 'field'
                    description: Response error data
                  message:
                    type: string
                    description: Response error message
                description: Response body
              example:
                code: 40013
                data: {}
                message: Store does not exist.
      x-code-samples:
      - lang: Shell
        source: |2

          curl --location --request PUT 'localhost:8000/api/v2/io/orders/company'                         --header 'authToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiMWk2enB4cGUzZyIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoia2lkby56aGFvQGJ1bmRsZWIyYi5uZXQifQ.fB8TtxpTDdhOUmR_7gYV16w9nV3Kp0US52W8JMHG1js'                         --header 'Content-Type: application/json'                         --data-raw '{
              "customerGroupID": "6406",
              "customerID": "7298"
          }'
      - lang: Python
        source: |2

                                  import requests

                                  url = "localhost:8000/api/v2/io/orders/company"

                                  payload = "{
              "customerGroupID": "6406",
              "customerID": "7298"
          }"
                                  headers = {
                                    'authToken': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiMWk2enB4cGUzZyIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoia2lkby56aGFvQGJ1bmRsZWIyYi5uZXQifQ.fB8TtxpTDdhOUmR_7gYV16w9nV3Kp0US52W8JMHG1js',
                                    'Content-Type': 'application/json'
                                  }

                                  response = requests.request("PUT", url, headers=headers, data = payload)

                                  print(response.text.encode('utf8'))
              )
      - lang: JavaScript
        source: |2

          var myHeaders = new Headers();
          myHeaders.append("authToken", "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiMWk2enB4cGUzZyIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoia2lkby56aGFvQGJ1bmRsZWIyYi5uZXQifQ.fB8TtxpTDdhOUmR_7gYV16w9nV3Kp0US52W8JMHG1js");
          myHeaders.append("Content-Type", "application/json");

          var raw = JSON.stringify({"customerGroupID":"6406","customerID":"7298"});

          var requestOptions = {
            method: 'PUT',
            headers: myHeaders,
            body: raw,
            redirect: 'follow'
          };

          fetch("localhost:8000/api/v2/io/orders/company", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
      x-codegen-request-body-name: data
    post:
      tags:
      - Order
      deprecated: true
      summary: Update BC Order's 'Company attribute'
      description: "Add Company identifier for BigCommerce Customer Individual Orders,\
        \ which can be used to convert BigCommerce Customer Individual Orders to Company-level\
        \ Orders."
      operationId: orders_company_create
      parameters:
      - name: authToken
        in: header
        description: Auth token in header.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
              - customerID
              type: object
              properties:
                customerID:
                  type: string
                  description: BigCommerce user id.
              description: Request body
        required: true
      responses:
        "200":
          description: Response Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties: {}
                    description: Response data
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                data: {}
                message: Success
        "400":
          description: Response Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status error code
                  data:
                    type: object
                    properties:
                      '[field]':
                        type: string
                        description: Message about problem with field 'field'
                    description: Response error data
                  message:
                    type: string
                    description: Response error message
                description: Response body
              example:
                code: 40013
                data: {}
                message: Store does not exist.
      x-code-samples:
      - lang: Shell
        source: |2

          curl --location --request POST 'localhost:8000/api/v2/io/orders/convert-from-bc'                         --header 'authToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJlbWFpbCI6ImtpZG8uemhhb0BidW5kbGViMmIubmV0Iiwic3RvcmVfaGFzaCI6IjFpNnpweHBlM2ciLCJkYiI6ImRlZmF1bHQiLCJpc19iYWNrZW5kX3VzZXIiOiIyIn0.BpLPDLnmSEHgXw5Rf06G2kp0bKbMaJhxSxAuUW9vRo4'                         --header 'Content-Type: application/json'                         --data-raw '{
              "customerID": "7566"
          }'
      - lang: Python
        source: |2

                                  import requests

                                  url = "localhost:8000/api/v2/io/orders/convert-from-bc"

                                  payload = "{
              "customerID": "7566"
          }"
                                  headers = {
                                    'authToken': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJlbWFpbCI6ImtpZG8uemhhb0BidW5kbGViMmIubmV0Iiwic3RvcmVfaGFzaCI6IjFpNnpweHBlM2ciLCJkYiI6ImRlZmF1bHQiLCJpc19iYWNrZW5kX3VzZXIiOiIyIn0.BpLPDLnmSEHgXw5Rf06G2kp0bKbMaJhxSxAuUW9vRo4',
                                    'Content-Type': 'application/json'
                                  }

                                  response = requests.request("POST", url, headers=headers, data = payload)

                                  print(response.text.encode('utf8'))
      - lang: JavaScript
        source: |2

          var myHeaders = new Headers();
          myHeaders.append("authToken", "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJlbWFpbCI6ImtpZG8uemhhb0BidW5kbGViMmIubmV0Iiwic3RvcmVfaGFzaCI6IjFpNnpweHBlM2ciLCJkYiI6ImRlZmF1bHQiLCJpc19iYWNrZW5kX3VzZXIiOiIyIn0.BpLPDLnmSEHgXw5Rf06G2kp0bKbMaJhxSxAuUW9vRo4");
          myHeaders.append("Content-Type", "application/json");

          var raw = JSON.stringify({"customerID":"7566"});

          var requestOptions = {
            method: 'POST',
            headers: myHeaders,
            body: raw,
            redirect: 'follow'
          };

          fetch("localhost:8000/api/v2/io/orders/convert-from-bc", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
      x-codegen-request-body-name: data
  /orders/images:
    get:
      tags:
      - Order
      deprecated: true
      summary: Get Orders Images
      description: Get all orders' images
      operationId: orders_images_list
      parameters:
      - name: authToken
        in: header
        description: Auth token in header.
        required: true
        schema:
          type: string
      - name: orderIds
        in: query
        description: Query order ids
        schema:
          type: string
      responses:
        "200":
          description: Response Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: array
                    description: ""
                    items:
                      type: object
                      properties:
                        imageUrl:
                          type: string
                          description: Image url.
                        orderId:
                          type: string
                          description: Order id.
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                data:
                - imageUrl: https://www.google.com/imgres?imgurl=https%3A%2F%2Fimg.freepik.com%2Ffree-vector%2Fbroken-frosted-glass-realistic-icon_1284-12125.jpg%3Fsize%3D338%26ext%3Djpg&imgrefurl=https%3A%2F%2Fwww.freepik.com%2Ffree-photos-vectors%2Fpng&tbnid=tiRj4_jn2S_1DM&vet=12ahUKEwj_m-T-m8LqAhUTq54KHXruCV4QMygCegUIARDRAQ..i&docid=kU78UyWVW14S1M&w=338&h=338&q=png&ved=2ahUKEwj_m-T-m8LqAhUTq54KHXruCV4QMygCegUIARDRAQ
                  orderId: "1"
                message: Success
      x-code-samples:
      - lang: Shell
        source: |2

          curl --location --request GET 'https://api-b2b.bigcommerce.com/api/v2/io/orders/images'                     --header 'authToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'
      - lang: Python
        source: |2

          import requests

          url = "https://api-b2b.bigcommerce.com/api/v2/io/orders/images"

          payload = {}
          headers = {
            'authToken': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'
          }

          response = requests.request("GET", url, headers=headers, data = payload)

          print(response.text.encode('utf8'))
      - lang: JavaScript
        source: |2

          var myHeaders = new Headers();
          myHeaders.append("authToken", "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY");

          var requestOptions = {
            method: 'GET',
            headers: myHeaders,
            redirect: 'follow'
          };

          fetch("https://api-b2b.bigcommerce.com/api/v2/io/orders/images", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
  /orders/{orderBCId}/companyIdBCId:
    get:
      tags:
      - Order
      deprecated: true
      summary: Get Company By BC OrderId
      description: Get company basic info by bc order id
      operationId: orders_companyIdBCId_list
      parameters:
      - name: orderBCId
        in: path
        required: true
        schema:
          type: string
      - name: authToken
        in: header
        description: Auth token in header.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Response Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      companyId:
                        type: string
                        description: Company id
                      companyName:
                        type: string
                        description: Company name
                      customerGroupId:
                        type: string
                        description: company customer group id
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                data:
                  companyId: "2"
                  companyName: ABC.LLC
                  customerGroupId: "11"
                message: Success
        "400":
          description: Response Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status error code
                  data:
                    type: object
                    properties:
                      '[field]':
                        type: string
                        description: Message about problem with field 'field'
                    description: Response error data
                  message:
                    type: string
                    description: Response error message
                description: Response body
              example:
                code: 40013
                data: {}
                message: Order does not exist.
      x-code-samples:
      - lang: Shell
        source: |2

          curl --location --request GET 'https://api-b2b.bigcommerce.com/api/v2/io/orders/23/companyIdBCId'                         --header 'authToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'
      - lang: Python
        source: |2

          import requests

          url = "https://api-b2b.bigcommerce.com/api/v2/io/orders/23/companyIdBCId"

          payload = {}
          headers = {
            'authToken': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'
          }

          response = requests.request("GET", url, headers=headers, data = payload)

          print(response.text.encode('utf8'))
      - lang: JavaScript
        source: |2

          var myHeaders = new Headers();
          myHeaders.append("authToken", "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY");

          var requestOptions = {
            method: 'GET',
            headers: myHeaders,
            redirect: 'follow'
          };

          fetch("https://api-b2b.bigcommerce.com/api/v2/io/orders/23/companyIdBCId", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
  /orders/{orderId}/companyId:
    get:
      tags:
      - Order
      deprecated: true
      summary: Get Company Id By Order Id
      description: Get company ID by order id
      operationId: orders_companyId_list
      parameters:
      - name: orderId
        in: path
        required: true
        schema:
          type: string
      - name: authToken
        in: header
        description: Auth token in header.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Response Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      companyId:
                        type: string
                        description: Company id
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                data:
                  companyId: "2"
                message: Success
      x-code-samples:
      - lang: Shell
        source: |2

          curl --location --request GET 'https://api-b2b.bigcommerce.com/api/v2/io/orders/12/companyId'                     --header 'authToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'
      - lang: Python
        source: |2

          import requests

          url = "https://api-b2b.bigcommerce.com/api/v2/io/orders/12/companyId"

          payload = {}
          headers = {
            'authToken': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'
          }

          response = requests.request("GET", url, headers=headers, data = payload)

          print(response.text.encode('utf8'))
      - lang: JavaScript
        source: |2

          var myHeaders = new Headers();
          myHeaders.append("authToken", "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY");

          var requestOptions = {
            method: 'GET',
            headers: myHeaders,
            redirect: 'follow'
          };

          fetch("https://api-b2b.bigcommerce.com/api/v2/io/orders/12/companyId", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
  /orders/{orderId}/details:
    get:
      tags:
      - Order
      deprecated: true
      summary: Get Order Detail
      description: Get order's Detail
      operationId: orders_details_list
      parameters:
      - name: orderId
        in: path
        required: true
        schema:
          type: string
      - name: authToken
        in: header
        description: Auth token in header.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Response Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    allOf:
                    - type: object
                      properties:
                        base_handling_cost:
                          type: string
                          description: eg. 0.0000
                        base_shipping_cost:
                          type: string
                          description: eg. 0.0000
                        base_wrapping_cost:
                          type: string
                          description: eg. 0.0000
                        billingAddress:
                          type: object
                          properties:
                            city:
                              type: string
                            company:
                              type: string
                              description: Company name
                            country:
                              type: string
                              description: Human readable country name
                            countryIso2:
                              type: string
                              description: Country ISO info.
                            email:
                              type: string
                              description: Address email.
                            firstName:
                              type: string
                              description: Address first name
                            formFields:
                              type: string
                              description: Address form fields.
                            lastName:
                              type: string
                              description: Address last name
                            phone:
                              type: string
                              description: Address phone number
                            state:
                              type: string
                              description: Human readable state (or other subdivision)
                                name
                            streetOne:
                              type: string
                              description: Typically the street address
                            streetTwo:
                              type: string
                              description: "More detailed information about where\
                                \ to deliver mail, such as a suite or office number"
                            zip:
                              type: string
                        cart_id:
                          type: string
                          description: eg. 5e70bf45-9271-4737-8a80-94f7c99c2e2b
                        coupon_discount:
                          type: string
                          description: eg. 0.00000
                        credit_card_type:
                          type: string
                          description: eg. null
                        currency_code:
                          type: string
                          description: eg. USD
                        currency_exchange_rate:
                          type: string
                          description: eg. 1.0000000
                        currency_id:
                          type: number
                          description: eg. 1
                        customer_id:
                          type: number
                          description: eg. 168
                        customer_message:
                          type: string
                          description: eg. 123
                        date_created:
                          type: string
                          description: "eg. 'Tue, 29 Oct 2019 09:58:32 +0000'"
                        date_modified:
                          type: string
                          description: "eg. 'Tue, 29 Oct 2019 09:58:32 +0000'"
                        date_shipped:
                          type: string
                          description: "eg. 'Tue, 29 Oct 2019 09:58:32 +0000'"
                        default_currency_code:
                          type: string
                          description: eg. USD
                        default_currency_id:
                          type: number
                          description: eg. 1
                        discount_amount:
                          type: string
                          description: eg. 0.00000
                        ebay_order_id:
                          type: string
                          description: eg. 0
                        external_source:
                          type: string
                          description: 'eg. '
                        geoip_country:
                          type: string
                          description: eg. China
                        geoip_country_iso2:
                          type: string
                          description: eg. CN
                        gift_certificate_amount:
                          type: string
                          description: eg. 0.0000
                        handling_cost_ex_tax:
                          type: string
                          description: eg. 0.0000
                        handling_cost_inc_tax:
                          type: string
                          description: eg. 0.0000
                        handling_cost_tax:
                          type: string
                          description: eg. 0.0000
                        handling_cost_tax_class_id:
                          type: number
                          description: eg. 2
                        id:
                          type: string
                          description: Order id
                        ip_address:
                          type: string
                          description: eg. 118.112.75.229
                        is_deleted:
                          type: boolean
                          description: eg. False
                        is_email_opt_in:
                          type: boolean
                          description: eg. false
                        items_shipped:
                          type: number
                          description: eg. 2
                        items_total:
                          type: number
                          description: eg. 2
                        order_is_digital:
                          type: boolean
                        order_source:
                          type: string
                          description: eg. www
                        payment_method:
                          type: string
                          description: eg. PO
                        payment_provider_id:
                          type: string
                          description: payment provider id
                        payment_status:
                          type: string
                          description: eg. AwaitingPayment
                        products:
                          type: array
                          items:
                            type: object
                            properties:
                              applied_discounts:
                                type: string
                                description: "eg. []"
                              base_cost_price:
                                type: string
                                description: eg. 1.0000
                              base_price:
                                type: string
                                description: eg. 22.5000
                              base_total:
                                type: string
                                description: eg. 140.0000
                              base_wrapping_cost:
                                type: string
                                description: eg. 1.0000
                              bin_picking_number:
                                type: string
                                description: eg. 1
                              configurable_fields:
                                type: string
                                description: "eg. []"
                              cost_price_ex_tax:
                                type: string
                                description: eg. 1.0000
                              cost_price_inc_tax:
                                type: string
                                description: eg. 1.0000
                              cost_price_tax:
                                type: string
                                description: eg. 1.0000
                              coupons:
                                type: object
                                properties:
                                  resource:
                                    type: string
                                    description: eg. /orders/123/coupons
                                  url:
                                    type: string
                                    description: coupon url
                              custom_status:
                                type: string
                                description: eg. Awaiting Payment
                              depth:
                                type: string
                                description: eg. 1.0000
                              ebay_item_id:
                                type: string
                                description: eg. 1
                              ebay_transaction_id:
                                type: string
                                description: eg. 1
                              event_date:
                                type: string
                                description: eg. 1.0000
                              event_name:
                                type: string
                                description: eg. 1.0000
                              external_id:
                                type: string
                                description: eg. null
                              external_merchant_id:
                                type: string
                                description: eg. null
                              fixed_shipping_cost:
                                type: string
                                description: eg. 1.0000
                              fulfillment_source:
                                type: string
                                description: "eg. []"
                              height:
                                type: string
                                description: eg. 1.0000
                              id:
                                type: string
                                description: eg 1.
                              is_bundled_product:
                                type: boolean
                                description: eg. false
                              is_refunded:
                                type: boolean
                                description: eg. false
                              name:
                                type: string
                              option_set_id:
                                type: string
                                description: eg. 1
                              order_address_id:
                                type: string
                                description: eg. 24
                              order_id:
                                type: string
                                description: eg 3.
                              parent_order_product_id:
                                type: string
                                description: eg. 1
                              poNumber:
                                type: object
                                properties:
                                  resource:
                                    type: string
                                    description: eg. orders/123/shippingaddresses/24/shippingquotes
                                  url:
                                    type: string
                                    description: shipping quote url
                              priceExTax:
                                type: string
                              priceIncTax:
                                type: string
                              price_tax:
                                type: string
                                description: eg. 0.0000
                              productId:
                                type: string
                                description: Product id.
                              productOptions:
                                type: string
                              product_options:
                                type: string
                                description: "eg. []"
                              quantity:
                                type: string
                              quantity_refunded:
                                type: string
                                description: eg. 1.0000
                              quantity_shipped:
                                type: number
                                description: eg. 1
                              refund_amount:
                                type: string
                                description: eg. 1.0000
                              return_id:
                                type: number
                                description: eg. 1.0000
                              shipments:
                                type: boolean
                                description: eg. false
                              shipping_address:
                                type: object
                                properties:
                                  resource:
                                    type: string
                                    description: eg. /orders/123/shippingaddresses
                                  url:
                                    type: string
                                    description: shipping address url
                              sku:
                                type: string
                              store_default_currency_code:
                                type: string
                                description: eg. USD
                              store_default_to_transactional_exchange_rate:
                                type: string
                                description: eg. 1.00000000
                              tax_provider_id:
                                type: string
                                description: eg. BasicTaxProvider
                              total_ex_tax:
                                type: string
                                description: eg. 140.0000
                              total_inc_tax:
                                type: string
                                description: eg. 140.0000
                              total_tax:
                                type: string
                                description: eg. 0.0000
                              type:
                                type: string
                                description: eg. physical
                              upc:
                                type: string
                              variantId:
                                type: string
                              variant_id:
                                type: string
                                description: eg. 74
                              weight:
                                type: string
                                description: eg. 1.0000
                              width:
                                type: string
                                description: eg. 1.0000
                              wrapping_cost_ex_tax:
                                type: string
                                description: eg. 1.0000
                              wrapping_cost_inc_tax:
                                type: string
                                description: eg. 1.0000
                              wrapping_cost_tax:
                                type: string
                                description: eg. 1.0000
                              wrapping_message:
                                type: string
                                description: eg. 1.0000
                              wrapping_name:
                                type: string
                                description: eg. 1.0000
                        refunded_amount:
                          type: string
                          description: eg. 0.0000
                        shippingAddress:
                          type: object
                          properties:
                            base_cost:
                              type: string
                              description: eg. 0.0000
                            base_handling_cost:
                              type: string
                              description: eg. 0.0000
                            city:
                              type: string
                            company:
                              type: string
                              description: Company name
                            cost_ex_tax:
                              type: string
                              description: eg. 0.0000
                            cost_inc_tax:
                              type: string
                              description: eg. 0.0000
                            cost_tax:
                              type: string
                              description: eg. 0.0000
                            cost_tax_class_id:
                              type: string
                              description: eg. 20
                            country:
                              type: string
                              description: Human readable country name
                            countryIso2:
                              type: string
                              description: Country ISO info.
                            email:
                              type: string
                              description: Address email.
                            firstName:
                              type: string
                              description: Address first name
                            formFields:
                              type: string
                              description: Address form fields.
                            form_fields:
                              type: string
                              description: "eg. []"
                            handling_cost_ex_tax:
                              type: string
                              description: eg. 0.0000
                            handling_cost_inc_tax:
                              type: string
                              description: eg. 0.0000
                            handling_cost_tax:
                              type: string
                              description: eg. 0.0000
                            handling_cost_tax_class_id:
                              type: number
                              description: eg. 1
                            items_shipped:
                              type: string
                              description: eg. 6
                            items_total:
                              type: string
                              description: eg. 6
                            lastName:
                              type: string
                              description: Address last name
                            phone:
                              type: string
                              description: Address phone number
                            shipping_method:
                              type: string
                              description: eg. Free Shipping
                            shipping_quoteseg:
                              type: object
                              properties: {}
                            shipping_zone_id:
                              type: number
                              description: eg. 1
                            shipping_zone_name:
                              type: string
                              description: eg. United States1
                            state:
                              type: string
                              description: Human readable state (or other subdivision)
                                name
                            streetOne:
                              type: string
                              description: Typically the street address
                            streetTwo:
                              type: string
                              description: "More detailed information about where\
                                \ to deliver mail, such as a suite or office number"
                            zip:
                              type: string
                        shipping_address_count:
                          type: number
                          description: eg. 1
                        shipping_cost_ex_tax:
                          type: string
                          description: eg. 0.0000
                        shipping_cost_inc_tax:
                          type: string
                          description: eg. 0.0000
                        shipping_cost_tax:
                          type: string
                          description: eg. 0.0000
                        shipping_cost_tax_class_id:
                          type: number
                          description: eg. 2
                        staff_notes:
                          type: string
                        status:
                          type: string
                          description: eg. Awaiting Payment
                        status_id:
                          type: number
                          description: eg. 8
                        store_credit_amount:
                          type: string
                          description: eg. 0.0000
                        subtotal_ex_tax:
                          type: string
                          description: eg. 135.0000
                        subtotal_inc_tax:
                          type: string
                          description: eg. 135.0000
                        subtotal_tax:
                          type: string
                          description: eg. 0.0000
                        total_ex_tax:
                          type: string
                          description: eg. 135.0000
                        total_inc_tax:
                          type: string
                          description: eg. 135.0000
                        total_tax:
                          type: string
                          description: eg. 0.0000
                        wrapping_cost_ex_tax:
                          type: string
                          description: eg. 0.0000
                        wrapping_cost_inc_tax:
                          type: string
                          description: eg. 0.0000
                        wrapping_cost_tax:
                          type: string
                          description: eg. 0.0000
                        wrapping_cost_tax_class_id:
                          type: number
                          description: eg. 2
                        channelId:
                          type: integer
                          description: BigCommerce channel id
                        channelName:
                          type: string
                          description: Channel name
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                data:
                  base_handling_cost: "0.0000"
                  base_shipping_cost: "0.0000"
                  base_wrapping_cost: "0.0000"
                  billing_address:
                    city: Irvine
                    company: qqqq
                    country: United States
                    country_iso2: US
                    email: 15002803905@163.com
                    first_name: sdsdsd
                    form_fields: []
                    last_name: errte
                    phone: "9497486023"
                    state: California
                    street_1: "15440 Laguna Canyon Road, Ste 213"
                    street_2: ssadsdas
                    zip: "92618"
                  cart_id: f6a167af-fdc2-4409-8282-0358c36b46c5
                  channel_id: "1"
                  coupon_discount: "0.0000"
                  coupons:
                    resource: /orders/126/coupons
                    url: https://api.bigcommerce.com/stores/1i6zpxpe3g/v2/orders/126/coupons
                  credit_card_type: ""
                  currency_code: USD
                  currency_exchange_rate: "1.0000000000"
                  currency_id: 1
                  custom_status: Awaiting Payment
                  customer_id: 168
                  customer_message: |-
                    123456
                    123456798
                  date_created: "Tue, 29 Oct 2019 12:33:25 +0000"
                  date_modified: "Tue, 29 Oct 2019 12:33:29 +0000"
                  date_shipped: ""
                  default_currency_code: USD
                  default_currency_id: 1
                  discount_amount: "0.0000"
                  ebay_order_id: "0"
                  external_id: null
                  external_merchant_id: null
                  external_source: ""
                  geoip_country: China
                  geoip_country_iso2: CN
                  gift_certificate_amount: "0.0000"
                  handling_cost_ex_tax: "0.0000"
                  handling_cost_inc_tax: "0.0000"
                  handling_cost_tax: "0.0000"
                  handling_cost_tax_class_id: 2
                  id: "126"
                  ip_address: 171.213.12.107
                  is_deleted: false
                  is_email_opt_in: false
                  items_shipped: 0
                  items_total: 20
                  order_is_digital: false
                  order_source: www
                  payment_method: PO
                  payment_provider_id: ""
                  payment_status: ""
                  poNumber: "123456798"
                  products:
                  - applied_discounts: ""
                    base_cost_price: "0.0000"
                    base_price: "5.0019"
                    base_total: "100.0000"
                    base_wrapping_cost: "0.0000"
                    bin_picking_number: ""
                    configurable_fields: ""
                    cost_price_ex_tax: "0.0000"
                    cost_price_inc_tax: "0.0000"
                    cost_price_tax: "0.0000"
                    depth: "0.0000"
                    ebay_item_id: ""
                    ebay_transaction_id: ""
                    event_date: ""
                    event_name: ""
                    external_id: ""
                    fixed_shipping_cost: "0.0000"
                    fulfillment_source: ""
                    height: "0.0000"
                    id: "39"
                    is_bundled_product: false
                    is_refunded: false
                    name: "[Sample] Tiered Wire Basket"
                    option_set_id: ""
                    order_address_id: "27"
                    order_id: "126"
                    parent_order_product_id: ""
                    price_ex_tax: "5.0000"
                    price_inc_tax: "5.0000"
                    price_tax: "0.0000"
                    product_id: 97
                    product_options: ""
                    quantity: "20"
                    quantity_refunded: "0"
                    quantity_shipped: 0
                    refund_amount: "0.0000"
                    return_id: 0
                    sku: TWB
                    total_ex_tax: "100.0000"
                    total_inc_tax: "100.0000"
                    total_tax: "0.0000"
                    type: physical
                    upc: ""
                    variant_id: "69"
                    weight: "1.0000"
                    width: "0.0000"
                    wrapping_cost_ex_tax: "0.0000"
                    wrapping_cost_inc_tax: "0.0000"
                    wrapping_cost_tax: "0.0000"
                    wrapping_message: ""
                    wrapping_name: ""
                  refunded_amount: "0.0000"
                  shipments: false
                  shippingAddress:
                    base_cost: "0.0000"
                    base_handling_cost: "0.0000"
                    city: Irvine
                    company: qqqq
                    cost_ex_tax: "0.0000"
                    cost_inc_tax: "0.0000"
                    cost_tax: "0.0000"
                    cost_tax_class_id: "2"
                    country: United States
                    country_iso2: US
                    email: 15002803905@163.com
                    first_name: sdsdsd
                    form_fields: ""
                    handling_cost_ex_tax: "0.0000"
                    handling_cost_inc_tax: "0.0000"
                    handling_cost_tax: "0.0000"
                    handling_cost_tax_class_id: 2
                    id: 27
                    items_shipped: "0"
                    items_total: "20"
                    last_name: errte
                    order_id: 126
                    phone: "9497486023"
                    shipping_method: Free Shipping
                    shipping_quotes:
                      resource: /orders/126/shippingaddresses/27/shippingquotes
                      url: https://api.bigcommerce.com/stores/1i6zpxpe3g/v2/orders/126/shippingaddresses/27/shippingquotes
                    shipping_zone_id: 1
                    shipping_zone_name: United States
                    state: California
                    street_1: "15440 Laguna Canyon Road, Ste 213"
                    street_2: ssadsdas
                    zip: "92618"
                  shipping_address_count: 1
                  shipping_addresses:
                    resource: /orders/126/shippingaddresses
                    url: https://api.bigcommerce.com/stores/1i6zpxpe3g/v2/orders/126/shippingaddresses
                  shipping_cost_ex_tax: "0.0000"
                  shipping_cost_inc_tax: "0.0000"
                  shipping_cost_tax: "0.0000"
                  shipping_cost_tax_class_id: 2
                  staff_notes: ""
                  status: Awaiting Payment
                  status_id: 7
                  store_credit_amount: "0.0000"
                  store_default_currency_code: USD
                  store_default_to_transactional_exchange_rate: "1.0000000000"
                  subtotal_ex_tax: "100.0000"
                  subtotal_inc_tax: "100.0000"
                  subtotal_tax: "0.0000"
                  tax_provider_id: BasicTaxProvider
                  total_ex_tax: "100.0000"
                  total_inc_tax: "100.0000"
                  total_tax: "0.0000"
                  wrapping_cost_ex_tax: "0.0000"
                  wrapping_cost_inc_tax: "0.0000"
                  wrapping_cost_tax: "0.0000"
                  wrapping_cost_tax_class_id: 3
                message: SUCCESS
        "404":
          description: Not Found Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      errMsg:
                        type: string
                        description: Error message info
                    description: Response data
                  message:
                    type: string
                    description: Response message
                description: Response body
              example:
                code: 404
                data:
                  errMsg: Order Does not Exist
                message: Not Found Error
      x-code-samples:
      - lang: Shell
        source: |2

          curl --location --request GET 'https://api-b2b.bigcommerce.com/api/v2/io/orders/12/details'                         --header 'authToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'
      - lang: Python
        source: |2

          import requests

          url = "https://api-b2b.bigcommerce.com/api/v2/io/orders/12/details"

          payload = {}
          headers = {
            'authToken': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'
          }

          response = requests.request("GET", url, headers=headers, data = payload)

          print(response.text.encode('utf8'))
      - lang: JavaScript
        source: |2

          var myHeaders = new Headers();
          myHeaders.append("authToken", "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY");

          var requestOptions = {
            method: 'GET',
            headers: myHeaders,
            redirect: 'follow'
          };

          fetch("https://api-b2b.bigcommerce.com/api/v2/io/orders/12/details", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
  /orders/{orderId}/products:
    get:
      tags:
      - Order
      deprecated: true
      summary: Get Order Product
      description: Get order's products info
      operationId: orders_products_list
      parameters:
      - name: orderId
        in: path
        required: true
        schema:
          type: string
      - name: authToken
        in: header
        description: Auth token in header.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Response Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      optionList:
                        type: array
                        description: ""
                        items:
                          type: object
                          properties:
                            option_id:
                              type: string
                              description: Product option ID
                            option_value:
                              type: string
                              description: Product option value
                      productId:
                        type: string
                        description: Product id
                      quantity:
                        type: string
                        description: Product quantity
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                data:
                  optionList: []
                  productId: "97"
                  quantity: "20"
                  variantId: "69"
                message: Success
        "404":
          description: Not Found Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      errMsg:
                        type: string
                        description: Error message info
                    description: Response data
                  message:
                    type: string
                    description: Response message
                description: Response body
              example:
                code: 404
                data:
                  errMsg: Order Does not Exist
                message: Not Found Error
      x-code-samples:
      - lang: Shell
        source: |2

          curl --location --request GET 'https://api-b2b.bigcommerce.com/api/v2/io/orders/12/products'                     --header 'authToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'
      - lang: Python
        source: |2

          import requests

          url = "https://api-b2b.bigcommerce.com/api/v2/io/orders/12/products"

          payload = {}
          headers = {
            'authToken': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'
          }

          response = requests.request("GET", url, headers=headers, data = payload)

          print(response.text.encode('utf8'))
      - lang: JavaScript
        source: |2

          var myHeaders = new Headers();
          myHeaders.append("authToken", "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY");

          var requestOptions = {
            method: 'GET',
            headers: myHeaders,
            redirect: 'follow'
          };

          fetch("https://api-b2b.bigcommerce.com/api/v2/io/orders/12/products", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
  /proxy:
    post:
      tags:
      - Proxy
      deprecated: true
      summary: Third party API proxy
      description: Get response data of third party APIs through this API.
      operationId: proxy_create
      parameters:
      - name: authToken
        in: header
        description: Auth token in header.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
              - method
              - proxyType
              - url
              type: object
              properties:
                data:
                  type: string
                  description: Request data of your third party request
                method:
                  type: string
                  description: "HTTP request method, get/post/put/delete"
                params:
                  type: string
                  description: Request parameters of your third party request
                proxyType:
                  type: string
                  description: "Third party type or name, such as BigCommerce"
                url:
                  type: string
                  description: Url of request
              description: Request body
        required: true
      responses:
        "200":
          description: Response Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                message: Success
        "500":
          description: Response Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status error code
                  message:
                    type: string
                    description: Response error message
                description: Response body
              example:
                code: 500
                message: Bigcommerce API error
      x-code-samples:
      - lang: Shell
        source: |2

          curl --location --request POST 'https://api-b2b.bigcommerce.com/api/v2/io/proxy'                         --header 'Content-Type: application/json'                         --data-raw '{
              "method": "get",
              "url": "/v2/customers",
              "proxyType": "Bigcommerce"
          }'
      - lang: Python
        source: |2

          import requests

          url = "https://api-b2b.bigcommerce.com/api/v2/io/proxy"

          payload = "{"method": "get", "url": "/v2/customers","proxyType": "Bigcommerce"}"
          headers = {
            'Content-Type': 'application/json'
          }

          response = requests.request("POST", url, headers=headers, data = payload)

          print(response.text.encode('utf8'))
      - lang: JavaScript
        source: |2

          var myHeaders = new Headers();
          myHeaders.append("Content-Type", "application/json");

          var raw = JSON.stringify({"method": "get", "url": "/v2/customers", "proxyType": "Bigcommerce"});

          var requestOptions = {
            method: 'POST',
            headers: myHeaders,
            body: raw,
            redirect: 'follow'
          };

          fetch("https://api-b2b.bigcommerce.com/api/v2/io/companies/23/addresses", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
      x-codegen-request-body-name: data
  /sales-reps/companies:
    get:
      tags:
      - SalesRep
      deprecated: true
      summary: Get Companies & Sales reps
      description: "Get all companies and their sales reps, default order by company"
      operationId: sales-reps_companies_list
      parameters:
      - name: authToken
        in: header
        description: Auth token in header.
        required: true
        schema:
          type: string
      - name: offset
        in: query
        description: "Pagination offset default: 0"
        schema:
          type: number
      - name: limit
        in: query
        description: "Pagination limit default: 10"
        schema:
          type: number
      - name: groupBy
        in: query
        description: "Group by('2' for company, '1' for sales reps)"
        schema:
          type: number
      - name: orderBy
        in: query
        description: Order by default DESC choice (DESC ASC)
        schema:
          type: number
      responses:
        "200":
          description: Response Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      list:
                        type: array
                        description: "This interface has 2 type response data type,\
                          \ if get with groupBy 2 will return company info, if get\
                          \ with groupBy 1 will return sales reps info"
                        items:
                          type: object
                          properties:
                            catalogId:
                              type: string
                              description: "Catalog Id(groupBy: 2)"
                            city:
                              type: string
                              description: "Company city(groupBy: 2)"
                            companyCount:
                              type: string
                              description: "Sales rep's company count (groupBy: 1)"
                            companyEmail:
                              type: string
                              description: "Company name(groupBy: 2)"
                            companyId:
                              type: string
                              description: "Company Id(groupBy: 2)"
                            companyName:
                              type: string
                              description: "Company name(groupBy: 2)"
                            country:
                              type: string
                              description: "Company country(groupBy: 2)"
                            email:
                              type: string
                              description: "Sales rep's email (groupBy: 1)"
                            firstName:
                              type: string
                              description: "Sales rep's first name(groupBy: 1)"
                            lastName:
                              type: string
                              description: "Sales rep's last name(groupBy: 1)"
                            role:
                              type: string
                              description: "Sales rep's role (groupBy: 1)"
                            salesRepCount:
                              type: string
                              description: "Company's sales reps count(groupBy: 2)"
                            salesRepId:
                              type: string
                              description: "Sales rep's Id (groupBy: 1)"
                            state:
                              type: string
                              description: "Company state(groupBy: 2)"
                            zipCode:
                              type: string
                              description: "Company zip code(groupBy: 2)"
                            channelList:
                              type: array
                              items:
                                type: object
                                properties:
                                  channelId:
                                    type: integer
                                    description: BigCommerce channel id
                                  channelName:
                                    type: string
                                    description: Channel name
                                  iconUrl:
                                    type: string
                                    description: Icon url
                      pagination:
                        type: object
                        properties:
                          limit:
                            type: number
                            description: Response pagination limit
                          offset:
                            type: number
                            description: Response pagination offset
                          totalCount:
                            type: number
                            description: Response data items number
                        description: Response data pagination
                    description: Response data
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                data:
                  list:
                  - addressLine1: ""
                    addressLine2: ""
                    catalogId: "2"
                    city: ""
                    companyEmail: kobe.tian@bunldeb2b.com
                    companyId: "34"
                    companyName: KobeCropTest111
                    country: ","
                    description: KobeCropTest111
                    salesRepCount: "2"
                    state: ""
                    zipCode: ""
                  pagination:
                    limit: 10
                    offset: 0
                    totalCount: 1
                message: SUCCESS
        "404":
          description: Not Found Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      errMsg:
                        type: string
                        description: Error message info
                    description: Response data
                  message:
                    type: string
                    description: Response message
                description: Response body
              example:
                code: 404
                data:
                  errMsg: Companies Does not Exist
                message: Not Found Error
  /store/payments:
    get:
      tags:
      - Payment
      deprecated: true
      summary: Get Store's All Payments
      description: Get store's all payments
      operationId: store_payments_list
      parameters:
      - name: authToken
        in: header
        description: Auth token in header.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Response Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      list:
                        type: array
                        description: ""
                        items:
                          type: object
                          properties:
                            paymentCode:
                              type: string
                              description: Payment method code
                            paymentTitle:
                              type: string
                              description: Payment method title
                    description: Response data
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                data:
                  list:
                  - paymentCode: authorizenet
                    paymentTitle: Authorize.net
                  - paymentCode: braintree
                    paymentTitle: Braintree
                  - paymentCode: cheque
                    paymentTitle: Check
                  - paymentCode: testgateway
                    paymentTitle: Test Payment Gateway
                message: SUCCESS
      x-code-samples:
      - lang: Shell
        source: |2

          curl --location --request GET 'https://api-b2b.bigcommerce.com/api/v2/io/store/payments'                         --header 'authToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'                         --header 'Content-Type: application/json'
      - lang: Python
        source: |2

          import requests

          url = "https://api-b2b.bigcommerce.com/api/v2/io/store/payments"

          payload = {}
          headers = {
            'authToken': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY',
            'Content-Type': 'application/json'
          }

          response = requests.request("GET", url, headers=headers, data = payload)

          print(response.text.encode('utf8'))
      - lang: JavaScript
        source: |2

          var myHeaders = new Headers();
          myHeaders.append("authToken", "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY");
          myHeaders.append("Content-Type", "application/json");

          var requestOptions = {
            method: 'GET',
            headers: myHeaders,
            redirect: 'follow'
          };

          fetch("https://api-b2b.bigcommerce.com/api/v2/io/store/payments", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
  /users/{customerId}/companies:
    get:
      tags:
      - Company
      deprecated: true
      summary: Get Company By CustomerId
      description: "Get company by customer Id, if company not in bigCommerce will\
        \ delete the company"
      operationId: users_companies_list
      parameters:
      - name: customerId
        in: path
        description: BigCommerce's customer id
        required: true
        schema:
          type: string
      - name: authToken
        in: header
        description: Auth token in header.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Response Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      addressLine1:
                        type: string
                        description: Company address line 1
                      addressLine2:
                        type: string
                        description: Company address line 2
                      catalogId:
                        type: string
                        description: Catalog Id
                      city:
                        type: string
                        description: Company city
                      companyId:
                        type: string
                        description: Company Id
                      companyName:
                        type: string
                        description: Company name
                      companyStatus:
                        type: string
                        description: Company status
                      country:
                        type: string
                        description: Company country
                      description:
                        type: string
                        description: Company description
                      state:
                        type: string
                        description: Company state
                      zipCode:
                        type: string
                        description: Company zip code
                    description: Response data
                  message:
                    type: string
                    description: Response message
              example:
                code: 200
                data:
                  addressLine1: ""
                  addressLine2: ""
                  catalogId: "1"
                  city: Paris
                  companyId: "35"
                  companyName: CropTest1
                  companyStatus: "1"
                  country: French
                  description: CropTest
                  state: BC
                  zipCode: "1032332"
                message: SUCCESS
        "404":
          description: Not Found Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    description: Response status code
                  data:
                    type: object
                    properties:
                      errMsg:
                        type: string
                        description: Error message info
                    description: Response data
                  message:
                    type: string
                    description: Response message
                description: Response body
              example:
                code: 404
                data:
                  errMsg: Companies Does not Exist
                message: Not Found Error
      x-code-samples:
      - lang: Shell
        source: "\ncurl --location --request GET 'https://https://api-b2b.bigcommerce.com/api/v2/io/users/124/companies'\
          \                              --header 'authToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY'\
          \                              --header 'Content-Type: application/json'\
          \ \n"
      - lang: Python
        source: |2

          import requests

          url = "https://api-b2b.bigcommerce.com/api/v2/io/users/124/companies"

          payload = {}
          headers = {
            'authToken': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY',
            'Content-Type': 'application/json'
          }

          response = requests.request("GET", url, headers=headers, data = payload)

          print(response.text.encode('utf8'))
      - lang: JavaScript
        source: |2

          var myHeaders = new Headers();
          myHeaders.append("authToken", "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdG9yZV9oYXNoIjoiZjJvc3hqam54aiIsImRiIjoiZGVmYXVsdCIsImVtYWlsIjoiYnJ1Y2UuaHVhbmdAc2lsa3NvZnR3YXJlLmNvbSJ9._DQFg-3FgtztdQVCGU5Gxfv8j8V3U9Ssaw7ARxUU6pY");
          myHeaders.append("Content-Type", "application/json");

          var requestOptions = {
            method: 'GET',
            headers: myHeaders,
            redirect: 'follow'
          };

          fetch("https://api-b2b.bigcommerce.com/api/v2/io/users/124/companies", requestOptions)
            .then(response => response.text())
            .then(result => console.log(result))
            .catch(error => console.log('error', error));
  /users/{userId}/company: {}
components:
  schemas:
    user_extra_field_values:
      title: User Extra field values
      type: object
      properties:
        userExtraFields:
          type: array
          items:
            required:
            - fieldName
            - fieldValue
            type: object
            properties:
              fieldName:
                type: string
                description: Field name that config in you store
              fieldValue:
                type: string
                description: Value of the extra field.
      description: User Extra Field Values
      example:
        userExtraFields:
        - fieldName: string
          fieldValue: string
      x-internal: false
    extra_field_values:
      title: Extra field values
      type: object
      properties:
        extraFields:
          type: array
          items:
            required:
            - fieldName
            - fieldValue
            type: object
            properties:
              fieldName:
                type: string
                description: Field name that config in you store
              fieldValue:
                type: string
                description: Value of the extra field.
      description: Extra Field Values
      example:
        extraFields:
        - fieldName: string
          fieldValue: string
      x-internal: false
  securitySchemes:
    authToken:
      type: apiKey
      name: authToken
      in: header
x-original-swagger-version: "2.0"
