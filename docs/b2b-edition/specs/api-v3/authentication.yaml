openapi: '3.0.0'
info:
  title: authentication
  version: '3.0'
  description: Api auth manage
servers:
  - url: 'https://api-b2b.bigcommerce.com/api/io'
tags:
  - name: Auth
    description: ''
paths:
  /auth/backend:
    parameters: []
    post:
      summary: Get Server to Server OpenAPI tokens
      operationId: post-auth-backend
      tags:
        - Auth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  code:
                    type: number
                  data:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          minLength: 1
                          description: Token name
                        token:
                          type: string
                          minLength: 1
                          description: Your token
                      required:
                        - name
                        - token
                  meta:
                    type: object
                    required:
                      - message
                    properties:
                      message:
                        type: string
                        minLength: 1
                required:
                  - code
                  - data
                  - meta
              examples:
                example-1:
                  value:
                    code: 200
                    data:
                      - name: fullPermsToken
                        token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJlbWFpbCI6InRlc3RfYjJjX29yZGVyX2ltcG9ydEBxcS5jb21tIiwic3RvcmVfaGFzaCI6ImYyb3N4ampueGoiLCJkYiI6ImRlZmF1bHQifQ.L_u_enljWoYBbPPskmYEQVHldHIaTcWMIB-SdFah850
                    meta:
                      message: SUCCESS
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                  data:
                    type: object
                    properties:
                      errMsg:
                        type: string
                        description: Error message
                  meta:
                    type: object
                    properties:
                      message:
                        type: string
              examples:
                example-1:
                  value:
                    code: 400
                    data:
                      errMsg: The email or password you have entered is incorrect. Please try again.
                    meta:
                      message: API logic error
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                storeHash:
                  type: string
                  minLength: 1
                  description: Your store unique store_hash
                email:
                  type: string
                  minLength: 1
                  description: 'Backend user email, the credential you use to log in B2B Edition APP'
                password:
                  type: string
                  minLength: 1
                  description: 'Backend user password, the credential you use to log in B2B Edition APP'
                name:
                  type: string
                  description: The token name if you want specfiy
              required:
                - storeHash
                - email
                - password
                - name
            examples:
              example-1:
                value:
                  storeHash: string
                  email: string
                  password: string
                  name: test
          application/xml:
            schema:
              description: ''
              type: object
              properties:
                storeHash:
                  type: string
                  minLength: 1
                email:
                  type: string
                  minLength: 1
                password:
                  type: string
                  minLength: 1
              required:
                - storeHash
                - email
                - password
            examples:
              example-1:
                value:
                  storeHash: 1i5ypxdlj
                  email: dev.test@bundleb2b.net
                  password: 1mdsafu3nf9x
        description: ''
      description: Get Server to Server OpenAPI tokens
      security: []
    delete:
      summary: Delete Backend OpenAPI tokens
      operationId: delete-auth-backend
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: https://raw.githubusercontent.com/bigcommerce/docs/main/docs/b2b-edition/models/utils/response-object.yaml
                  - type: object
                    properties:
                      data:
                        type: array
                        items: {}
              examples:
                example-1:
                  value:
                    code: 200
                    data: []
                    meta:
                      message: SUCCESS
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  data:
                    type: object
                    properties:
                      errMsg:
                        type: string
                  meta:
                    type: object
                    properties:
                      message:
                        type: string
                x-examples:
                  example-1:
                    code: 404
                    data:
                      errMsg: No matching token
                    meta:
                      message: Not Found Error
              examples:
                example-1:
                  value:
                    code: 404
                    data:
                      errMsg: No matching token was found
                    meta:
                      message: Not Found Error
      description: Delete backend OpenAPI tokens.
      security:
        - authToken: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: |
                    Backend user email, the credential you use to log in B2B Edition APP. Which will be used as a query parameter.
                  minLength: 1
                name:
                  type: string
                  description: 'The token name, which will be used as a query parameter.'
                id:
                  type: integer
                  description: Token ID
              required:
                - id
      tags:
        - Auth
  /backend/tokens:
    get:
      summary: Get All Server to Server Tokens
      tags:
        - Auth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: Token ID
                        name:
                          type: string
                          description: Token name
                        email:
                          type: string
                          description: Token email
                        storeHash:
                          type: string
                          description: Token store hash
                        token:
                          type: string
                          description: Token
                        eventChannel:
                          type: string
                          description: 'The channel that token created from app,admin or api.'
                  meta:
                    type: object
                    properties:
                      pagination:
                        type: object
                        properties:
                          totalCount:
                            type: integer
                            description: The total number of the all data
                          offset:
                            type: integer
                            description: 'Pagination offset default: 0'
                            minimum: 0
                            exclusiveMinimum: false
                            default: 0
                          limit:
                            type: integer
                            description: 'Pagination limit default: 10'
                            minimum: 1
                            maximum: 250
                            example: 10
                            default: 10
                      message:
                        type: string
              examples:
                example-1:
                  value:
                    code: 0
                    data:
                      - id: 0
                        name: string
                        email: string
                        storeHash: string
                        token: string
                        eventChannel: string
                    meta:
                      pagination:
                        totalCount: 0
                        offset: 0
                        limit: 10
                      message: string
            application/xml:
              schema:
                type: object
                properties: {}
              examples:
                example-1:
                  value: {}
      operationId: get-backend-tokens
      description: Get all Server to Server OpenAPI tokens
      parameters:
        - schema:
            type: integer
            default: 10
          in: query
          name: limit
          description: Pagination limit
        - schema:
            type: integer
            default: 0
          in: query
          name: offset
          description: Pagination offset
  /auth/storefront:
    get:
      summary: Get a StoreFront OpenAPI AuthToken
      tags:
        - Auth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  code:
                    type: number
                  data:
                    type: object
                    required:
                      - token
                    properties:
                      token:
                        type: string
                        minLength: 1
                        description: Your storefront token
                  meta:
                    type: object
                    required:
                      - message
                    properties:
                      message:
                        type: string
                        minLength: 1
                required:
                  - code
                  - data
                  - meta
              examples:
                example-1:
                  value:
                    code: 200
                    data:
                      token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJlbWFpbCI6InRlc3RfYjJjX29yZGVyX2ltcG9ydEBxcS5jb21tIiwic3RvcmVfaGFzaCI6ImYyb3N4ampueGoiLCJkYiI6ImRlZmF1bHQifQ.L_u_enljWoYBbPPskmYEQVHldHIaTcWMIB-SdFah850
                    meta:
                      message: SUCCESS
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                  data:
                    type: object
                    properties:
                      errMsg:
                        type: string
                  meta:
                    type: object
                    properties:
                      message:
                        type: string
              examples:
                example-1:
                  value:
                    code: 401
                    data:
                      errMsg: Invalid token header. No credentials provided.
                    meta:
                      message: Invalid token header. No credentials provided.
      operationId: get-auth-storefront
      description: Get a storeFront openAPI authToken
      parameters:
        - schema:
            type: string
          in: query
          name: jwtToken
          description: BC JWT token
          required: true
        - schema:
            type: string
          in: query
          name: channelId
          description: The BigCommerce channel id. Do not use this parameter if you do not have opened multi-storefront
      security: []
  /auth/customers:
    post:
      summary: Get StoreFront authToken with Credentials
      operationId: post-auth-customer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    code: 200
                    data:
                      name: test9
                      token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJlbWFpbCI6ImtpZG8yNzZAc25hcG1haWwuY2MiLCJzdG9yZV9oYXNoIjoiMWk2enB4cGUzZyIsImRiIjoiZGVmYXVsdCIsIm5hbWUiOiJ0ZXN0OSIsImNoYW5uZWxfaWRzIjpbMV0sInRva2VuX3R5cGUiOjMsIm5iZiI6MTAwMCwiZXhwIjoyMDAxfQ.EiR__LVAlBVNYtFCZPWJYoPv6UfGiXtULxhK-BCQZjY
                    meta:
                      message: SUCCESS
                properties:
                  code:
                    type: number
                  data:
                    type: object
                    required:
                      - name
                      - token
                    properties:
                      name:
                        type: string
                        minLength: 1
                        description: The token name
                      token:
                        type: string
                        minLength: 1
                        description: Your token
                  meta:
                    type: object
                    required:
                      - message
                    properties:
                      message:
                        type: string
                        minLength: 1
                required:
                  - code
                  - data
                  - meta
              examples:
                example-1:
                  value:
                    code: 200
                    data:
                      name: test9
                      token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJlbWFpbCI6ImtpZG8yNzZAc25hcG1haWwuY2MiLCJzdG9yZV9oYXNoIjoiMWk2enB4cGUzZyIsImRiIjoiZGVmYXVsdCIsIm5hbWUiOiJ0ZXN0OSIsImNoYW5uZWxfaWRzIjpbMV0sInRva2VuX3R5cGUiOjMsIm5iZiI6MTAwMCwiZXhwIjoyMDAxfQ.EiR__LVAlBVNYtFCZPWJYoPv6UfGiXtULxhK-BCQZjY
                    meta:
                      message: SUCCESS
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  storeHash: '{{store_hash}}'
                  email: kido276@snapmail.cc
                  password: test12345
                  channelId: 1
                  name: test9
                  beginAt: 1000
                  endAt: 2001
              properties:
                storeHash:
                  type: string
                  minLength: 1
                  description: Your store unique store_hash
                email:
                  type: string
                  minLength: 1
                  description: BC customer email
                password:
                  type: string
                  minLength: 1
                  description: BC customer password
                channelId:
                  type: number
                  description: BigCommerce channel id
                name:
                  type: string
                  minLength: 1
                  description: The token name if you want to specfiy
              required:
                - storeHash
                - email
                - password
                - channelId
                - name
            examples:
              example-1:
                value:
                  storeHash: string
                  email: axe@snapmail.cc
                  password: test12345
                  channelId: 1
                  name: test
                  beginAt: 1000
                  endAt: 1721930486
        description: ''
      description: BC customer get a authentication token
      tags:
        - Auth
      security: []
    parameters: []
  /auth/customers/storefront:
    post:
      summary: Get B2B storefront token
      operationId: post-auth-customers-storefront
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                  meta:
                    type: object
                    properties:
                      message:
                        type: string
              examples:
                Example 1:
                  value:
                    code: 200
                    data:
                      token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJlbWFpbCI6IjEyM0AxMi5jb20iLCJiY19jdXN0b21lcl9pZCI6MzEzLCJzdG9yZV9oYXNoIjoiaW1rOHp6N2ppcCIsImRiIjoiZGVmYXVsdCIsImJjX2NoYW5uZWxfaWQiOjEsImV4cCI6MTY5MDg1NDI5Mn0.97rY-1aGDFKtLbIePR5g202AHZJ0x2kDjmyzGVGK45
                    meta:
                      message: success
      description: Get B2B storefront token by v3 io token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                customerId:
                  type: integer
                  description: BigCommerce customer id.
                channelId:
                  type: integer
                  description: BigCommerce channel id
              required:
                - customerId
            examples:
              Example 1:
                value:
                  customerId: 999
                  channelId: 1
      tags:
        - Auth
components:
  schemas: {}
  securitySchemes:
    authToken:
      name: authToken
      type: apiKey
      in: header
security:
  - authToken: []
