openapi: 3.0.1
info:
  title: Authentication
  description: "Description. Goes above all endpoint data. Also serves as 'landing page' data."
  contact:
    name: BigCommerce
    url: 'https://www.bigcommerce.com'
    email: support@bigcommerce.com
  version: v3
servers:
  - url: "https://api-b2b.bigcommerce.com/api/v3/io"
security:
  - authToken: []
tags:
  - name: Authentication

paths:
  /auth/backend:
    parameters: []
    post:
      tags:
        - Authentication
      summary: "short-description"
      operationId: post-auth-backend
      description: "extended-description"
      parameters: []
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - storeHash
                - email
                - password
                - name
              properties:
                storeHash:
                  $ref: "#/components/schemas/storeHash"
                email:
                  $ref: "#/components/schemas/email"
                password:
                  $ref: "#/components/schemas/password"
                name:
                  $ref: "#/components/schemas/tokenName"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/responseArray"
                  - type: object
                    properties:
                      code:
                        default: 200
                      data:
                        items:
                          properties:
                            name:
                              $ref: "#/components/schemas/tokenName"
                            token:
                              $ref: "#/components/schemas/tokenValue"
                      meta:
                        properties:
                          message:
                            example: "SUCCESS"
        "400":
          description: BAD REQUEST
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/responseObject"
                  - type: object
                    properties:
                      code:
                        default: 400
                      data:
                        properties:
                          errMsg:
                            allOf:
                              - $ref: "#/components/schemas/errMsg"
                              - type: string
                                example: "The email or password you have entered is incorrect. Please try again."
                      meta:
                        properties:
                          message:
                            example: "API logic error"
    delete:
      tags:
        - Authentication
      summary: "short-description"
      operationId: delete-auth-backend
      description: "extended-description"
      parameters: []
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                email:
                  $ref: "#/components/schemas/email"
                name:
                  $ref: "#/components/schemas/tokenName"
                id:
                  $ref: "#/components/schemas/tokenId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/responseArray"
                  - type: object
                    properties:
                      code:
                        default: 200
                      meta:
                        properties:
                          message:
                            example: "SUCCESS"
        "404":
          description: NOT FOUND
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/responseObject"
                  - type: object
                    properties:
                      code:
                        default: 404
                      data:
                        properties:
                          errMsg:
                            allOf:
                              - $ref: "#/components/schemas/errMsg"
                              - type: string
                                example: "No matching token was found."
                      meta:
                        properties:
                          message:
                            example: "Not Found Error"
  /auth/customers:
    parameters: []
    post:
      tags:
        - Authentication
      summary: "short-description"
      operationId: post-auth-customer
      description: "extended-description"
      parameters: []
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - storeHash
                - email
                - password
                - channelId
                - name
              properties:
                storeHash:
                  $ref: "#/components/schemas/storeHash"
                email:
                  $ref: "#/components/schemas/email"
                password:
                  $ref: "#/components/schemas/password"
                channelId:
                  $ref: "#/components/schemas/channelId"
                name:
                  $ref: "#/components/schemas/tokenName"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/responseObject"
                  - type: object
                    properties:
                      code:
                        default: 200
                      data:
                        properties:
                          name:
                            $ref: "#/components/schemas/tokenName"
                          token:
                            $ref: "#/components/schemas/tokenValue"
                      meta:
                        properties:
                          message:
                            example: "SUCCESS"
  /auth/customers/storefront:
    parameters: []
    post:
      tags:
        - Authentication
      summary: "short-description"
      operationId: post-auth-customers-storefront
      description: "extended-description"
      parameters: []
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - customerId
              properties:
                customerId:
                  $ref: "#/components/schemas/customerId"
                channelId:
                  $ref: "#/components/schemas/channelId"
                customerAccessToken:
                  $ref: "#/components/schemas/customerAccessToken"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/responseObject"
                  - type: object
                    properties:
                      code:
                        default: 200
                      data:
                        properties:
                          token:
                            type: array
                            items:
                              type: string
                              example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJlbWFpbCI6IjEyM0AxMi5jb20iLCJiY19jdXN0b21lcl9pZCI6MzEzLCJzdG9yZV9oYXNoIjoiaW1rOHp6N2ppcCIsImRiIjoiZGVmYXVsdCIsImJjX2NoYW5uZWxfaWQiOjEsImV4cCI6MTY5MDg1NDI5Mn0.97rY-1aGDFKtLbIePR5g202AHZJ0x2kDjmyzGVGK45"
                      meta:
                        properties:
                          message:
                            example: "SUCCESS"
  /auth/storefront:
    parameters: []
    get:
      tags:
        - Authentication
      summary: "short-description"
      operationId: get-auth-storefront
      description: "extended-description"
      parameters:
        - name: jwtToken
          in: query
          required: true
          schema:
            type: string
          description: "BC JWT token"
        - name: channelId
          in: query
          schema:
            type: string
          description: "The BigCommerce channel ID. Do not use this parameter if you do not have an opened multi-storefront."
          example: "123456"
      security: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/responseObject"
                  - type: object
                    properties:
                      code:
                        default: 200
                      data:
                        properties:
                          token:
                            $ref: "#/components/schemas/tokenValue"
                      meta:
                        properties:
                          message:
                            example: "SUCCESS"
        "401":
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/responseObject"
                  - type: object
                    properties:
                      code:
                        default: 401
                      data:
                        properties:
                          errMsg:
                            allOf:
                              - $ref: "#/components/schemas/errMsg"
                              - type: string
                                example: "Invalid token header. No credentials provided."
                      meta:
                        properties:
                          message:
                            example: "Invalid token header. No credentials provided."
  /backend/tokens:
    parameters: []
    get:
      tags:
        - Authentication
      summary: "short-description"
      operationId: get-backend-tokens
      description: "extended-description"
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: "Pagination limit"
          example: 10
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
          description: "Pagination offset"
          example: 10
      security: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/responseArray"
                  - type: object
                    properties:
                      code:
                        default: 200
                      data:
                        items:
                          properties:
                            id:
                              $ref: "#/components/schemas/tokenId"
                            name:
                              $ref: "#/components/schemas/tokenName"
                            email:
                              $ref: "#/components/schemas/email"
                            storeHash:
                              $ref: "#/components/schemas/storeHash"
                            token:
                              $ref: "#/components/schemas/tokenValue"
                            eventChannel:
                              type: string
                              description: 'The channel of the token created from an app, admin or API.'
                      meta:
                        properties:
                          message:
                            example: "SUCCESS"
                          pagination:
                            $ref: "#/components/schemas/responsePagination"

components:
  schemas:
    channelId:
      type: number
      description: "The unique ID for the token's storefront channel."
      default: 1
      example: 123456
    customerAccessToken:
      type: object
      properties:
        expires_at:
          type: string
          format: date
          description: "ISO formatted date when the token expires."
          example: "2024-12-31T00:00:00.0Z"
        value:
          $ref: "#/components/schemas/tokenValue"
    customerId:
      type: integer
      description: "The BigCommerce Customer ID."
      example: 456
    email:
      type: string
      format: email
      minLength: 1
      description: "The email address associated with a BigCommerce customer account."
      example: "marie.curie@example.com"
    password:
      type: string
      format: password
      minLength: 1
      description: "The password associated with the BigCommerce customer account."
    storeHash:
      type: string
      minLength: 1
      description: "The unique hash ID for the BigCommerce store."
      example: "abc123"
    tokenName:
      type: string
      description: "The name of the token, if provided."
      example: "temporaryTokenA"
    tokenId:
      type: integer
      description: "The ID of the token."
      example: 123
    tokenValue:
      type: string
      description: "Access Token"
      example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJlbWFpbCI6InRlc3RfYjJjX29yZGVyX2ltcG9ydEBxcS5jb21tIiwic3RvcmVfaGFzaCI6ImYyb3N4ampueGoiLCJkYiI6ImRlZmF1bHQifQ.L_u_enljWoYBbPPskmYEQVHldHIaTcWMIB-SdFah850"
# The following are response-only schema. Everything above can be either body or response.
    errMsg:
      type: string
      description: "Message associated with the error."
    responsePagination:
      type: object
      properties:
        totalCount:
          type: integer
          description: "The total number of the all data"
          example: 750
        limit:
          type: integer
          description: 'Pagination limit default: 10'
          default: 10
        offset:
          type: integer
          description: 'Pagination offset default: 0'
          default: 0
    responseObject:
      type: object
      properties:
        code:
          type: integer
          description: "The HTTP Status code of the response."
        data:
          type: object
        meta:
          type: object
          properties:
            message:
              type: string
    responseArray:
      type: object
      properties:
        code:
          type: integer
          description: "The HTTP Status code of the response."
        data:
          type: array
          items: {}
        meta:
          type: object
          properties:
            message:
              type: string

  securitySchemes:
    authToken:
      name: authToken
      description: |-
        Required to authenticate requests. Include the token in a header parameter called `authToken`.
      type: apiKey
      in: header
