openapi: 3.0.0
info:
  title: Request for Quote
  description: "Description. Goes above all endpoint data. Also serves as 'landing page'"
  contact:
    name: BigCommerce
    url: 'https://www.bigcommerce.com'
    email: support@bigcommerce.com
  version: v2
  termsOfService: 'https://www.bigcommerce.com/terms'
servers:
  - url: 'https://api-b2b.bigcommerce.com/api/v2'
security:
  - BearerToken: []
tags:
  - name: Request for Quote
x-internal: false

paths:
  /rfq:
    get:
      tags:
        - Request for Quote
      summary: "short-description"
      operationId: get-rfq
      description: "extended-description"
      parameters:
        - name: offset
          in: query
          schema:
            type: string
            default: "0"
          description: ""
        - name: limit
          in: query
          schema:
            type: string
            default: "10"
          description: ""
        - name: sortBy
          in: query
          schema:
            type: string
            default: "updatedAt"
            enum:
              - "updatedAt"
              - "createdAt"
          description: ""
        - name: orderBy
          in: query
          schema:
            type: string
            default: "DESC"
            enum:
              - "ASC"
              - "DESC"
          description: ""
        - name: q
          in: query
          schema:
            type: string
          example: ""
          description: ""
        - name: quoteNumber
          in: query
          schema:
            type: string
          example: ""
          description: ""
        - name: company
          in: query
          schema:
            type: string
          example: ""
          description: ""
        - name: salesRep
          in: query
          schema:
            type: string
          example: ""
          description: ""
        - name: status
          in: query
          schema:
            type: string
          example: ""
          description: ""
        - name: quoteTitle
          in: query
          schema:
            type: string
          example: ""
          description: ""
        - name: createdBy
          in: query
          schema:
            type: string
          example: ""
          description: ""
        - name: dateCreatedBeginAt
          in: query
          schema:
            type: string
          example: ""
          description: ""
        - name: dateCreatedEndAt
          in: query
          schema:
            type: string
          example: ""
          description: ""
        - name: dateUpdatedBeginAt
          in: query
          schema:
            type: string
          example: ""
          description: ""
        - name: dateUpdatedEndAt
          in: query
          schema:
            type: string
          example: ""
          description: ""
        - name: dateExpiredBeginAt
          in: query
          schema:
            type: string
          example: ""
          description: ""
        - name: dateExpiredEndAt
          in: query
          schema:
            type: string
          example: ""
          description: ""
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/responseSuccess"
                  - properties:
                      data:
                        properties:
                          list:
                            type: array
                            items:
                              $ref: "#/components/schemas/quoteData_LIST"
                          pagination:
                            type: object
                            properties:
                              totalCount:
                                type: integer
                              offset:
                                type: integer
                              limit:
                                type: integer
    post:
      tags:
        - Request for Quote
      summary: "short-description"
      operationId: post-rfq
      description: "extended-description"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/quoteData_POST"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/responseSuccess"
                  - properties:
                      data:
                        properties:
                          quoteId:
                            $ref: "#/components/schemas/quoteId"
                          quoteUrl:
                            $ref: "#/components/schemas/quoteUrl"
  /rfq/{quote_id}:
    parameters:
      - $ref: "#/components/parameters/quoteId"
    get:
      tags:
        - Request for Quote
      summary: "short-description"
      operationId: get-rfq-quote_id
      description: "extended-description"
      parameters:
        - $ref: "#/components/parameters/storeHash_REQUIRED"
        - name: date
          in: query
          required: true
          schema:
            type: string
          example: ""
          description: ""
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/responseSuccess"
                  - properties:
                      data:
                        $ref: "#/components/schemas/quoteData_DETAIL"
    put:
      tags:
        - Request for Quote
      summary: "short-description"
      operationId: put-rfq-quote_id
      description: "extended-description"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/quoteData_REQUEST"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/responseSuccess"
                  - properties:
                      data:
                        properties:
                          quoteId:
                            $ref: "#/components/schemas/quoteId"
                          quoteUrl:
                            $ref: "#/components/schemas/quoteUrl"
  /rfq/{quote_id}/checkout:
    parameters:
      - $ref: "#/components/parameters/quoteId"
    post:
      tags:
        - Request for Quote
      summary: "short-description"
      operationId: post-rfq-quote_id-checkout
      description: "extended-description"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                storeHash:
                  $ref: "#/components/schemas/storeHash"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/responseSuccess"
                  - properties:
                      data:
                        properties:
                          checkoutUrl:
                            type: string
                          cartId:
                            type: string
                          cartUrl:
                            type: string
  /rfq/{quote_id}/ordered:
    parameters:
      - $ref: "#/components/parameters/quoteId"
    post:
      tags:
        - Request for Quote
      summary: "short-description"
      operationId: post-rfq-quote_id-ordered
      description: "extended-description"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                orderId:
                  $ref: "#/components/schemas/orderId"
                storeHash:
                  $ref: "#/components/schemas/storeHash"
                shippingTotal:
                  type: number
                taxTotal:
                  type: number
                shippingMethod:
                  properties:
                    id:
                      type: string
                    type:
                      type: string
                    description:
                      type: string
                    imageUrl:
                      type: string
                    transitTime:
                      type: string
                    cost:
                      type: number
                    additionalDescription:
                      type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/responseSuccess"
                  - properties:
                      data:
                        type: object
  /rfq/{quote_id}/pdf-export:
    parameters:
      - $ref: "#/components/parameters/quoteId"
    post:
      tags:
        - Request for Quote
      summary: "short-description"
      operationId: post-rfq-quote_id-pdf-export
      description: "extended-description"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                storeHash:
                  $ref: "#/components/schemas/storeHash"
                currency:
                  $ref: "#/components/schemas/currencyExchange"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/responseSuccess"
                  - properties:
                      data:
                        properties:
                          url:
                            type: string
                            example: "https://example.com/quote.pdf"
  /rfq/configs:
    get:
      tags:
        - Request for Quote
      summary: "short-description"
      operationId: get-rfq-configs
      description: "extended-description"
      parameters:
        - $ref: "#/components/parameters/storeHash"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/responseSuccess"
                  - properties:
                      data:
                        properties:
                          switchStatus:
                            type: array
                            items:
                              properties:
                                key:
                                  type: string
                                isEnabled:
                                  type: string
                                  enum:
                                    - "0"
                                    - "1"
                          quoteOtherConfigs:
                            type: array
                            items:
                              properties:
                                key:
                                  type: string
                                value:
                                  type: string
  /rfq/emails:
    post:
      tags:
        - Request for Quote
      summary: "short-description"
      operationId: post-rfq-emails
      description: "extended-description"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                quoteId:
                  $ref: "#/components/schemas/quoteId"
                email:
                  $ref: "#/components/schemas/email"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseSuccess"
  /rfq/store-info:
    get:
      tags:
        - Request for Quote
      summary: "short-description"
      operationId: get-rfq-store-info
      description: "extended-description"
      parameters:
        - $ref: "#/components/parameters/storeHash"
        - name: companyId
          in: query
          schema:
            type: string
          example: ""
          description: ""
        - name: salesRepId
          in: query
          schema:
            type: string
          example: ""
          description: ""
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/responseSuccess"
                  - properties:
                      data:
                        properties:
                          storeUserInfo:
                            properties:
                              storeInfo:
                                $ref: "#/components/schemas/storeInfo"
                              companyInfo:
                                $ref: "#/components/schemas/companyInfo"
                              salesRepInfo:
                                $ref: "#/components/schemas/salesRepInfo"

components:
  schemas:
    quoteData_BASE:
      properties:
        quoteTitle:
          $ref: "#/components/schemas/quoteTitle"
        referenceNumber:
          $ref: "#/components/schemas/quoteReference"
        expiredAt:
          $ref: "#/components/schemas/quoteExpired"
        subtotal:
          $ref: "#/components/schemas/quoteSubtotal"
    quoteData_REQUEST:
      allOf:
        - $ref: "#/components/schemas/quoteData_BASE"
        - properties:
            storeHash:
              $ref: "#/components/schemas/storeHash"
            notes:
              $ref: "#/components/schemas/quoteNotes"
            legalTerms:
              $ref: "#/components/schemas/quoteLegalTerms"
            grandTotal:
              $ref: "#/components/schemas/quoteGrandTotal"
            discount:
              $ref: "#/components/schemas/quoteDiscount"
            message:
              type: string
            userEmail:
              type: string
              format: email
            isBackendUser:
              type: integer
            productList:
              allOf:
                - $ref: "#/components/schemas/productList"
                - required:
                    - sku
                    - basePrice
                    - discount
                    - offeredPrice
                    - quantity
                    - productId
                    - variantId
                    - imageUrl
                    - orderQuantityMaximum
                    - orderQuantityMinimum
                    - productName
            currency:
              allOf:
                - $ref: "#/components/schemas/currency_REQUEST"
            contactInfo:
              allOf:
                - $ref: "#/components/schemas/quoteShippingAddress"
                - required:
                    - name
                    - email
                    - companyName
                    - phoneNumber
            shippingAddress:
              allOf:
                - $ref: "#/components/schemas/quoteShippingAddress"
                - required:
                    - address
                    - apartment
                    - city
                    - state
                    - zipCode
                    - country
    quoteData_POST:
      allOf:
        - properties:
            companyId:
              type: number
            bcCustomerId:
              type: integer
            channelId:
              $ref: "#/components/schemas/quoteChannel"
        - $ref: "#/components/schemas/quoteData_REQUEST"
    quoteData_RESPONSE:
      allOf:
        - $ref: "#/components/schemas/quoteData_BASE"
        - properties:
            quoteNumber:
              type: string
            createdBy:
              type: string
            createdAt:
              type: integer
            status:
              $ref: "#/components/schemas/quoteStatus"
            bcOrderId:
              $ref: "#/components/schemas/bcOrderId"
            orderId:
              $ref: "#/components/schemas/orderId"
            channelId:
              $ref: "#/components/schemas/quoteChannel"
            currency:
              $ref: "#/components/schemas/currency_RESPONSE"
    quoteData_DETAIL:
      allOf:
        - properties:
            notes:
              $ref: "#/components/schemas/quoteNotes"
            legalTerms:
              $ref: "#/components/schemas/quoteLegalTerms"
            ChannelId:
              $ref: "#/components/schemas/quoteChannel"
            Channel Name:
              $ref: "#/components/schemas/quoteChannelName"
            discount:
              $ref: "#/components/schemas/quoteDiscount"
            grandTotal:
              $ref: "#/components/schemas/quoteGrandTotal"
        - $ref: "#/components/schemas/quoteData_RESPONSE"
        - properties:
            contactInfo:
              $ref: "#/components/schemas/quoteContactInfo"
            shippingAddress:
              $ref: "#/components/schemas/quoteShippingAddress"
            trackingHistory:
              type: object
              properties:
                date:
                  type: integer
                message:
                  type: string
            productList:
              allOf:
                - items:
                    properties:
                      notes:
                        type: string
                - $ref: "#/components/schemas/productList"
            storeInfo:
              $ref: "#/components/schemas/storeInfo"
            companyInfo:
              $ref: "#/components/schemas/companyInfo"
            salesRepInfo:
              $ref: "#/components/schemas/salesRepInfo"
    quoteData_LIST:
      allOf:
        - properties:
            quoteId:
              $ref: "#/components/schemas/quoteId"
            company:
              type: string
            salesRep:
              type: string
            updatedAt:
              type: integer
            ChannelName:
              $ref: "#/components/schemas/quoteChannelName"
        - $ref: "#/components/schemas/quoteData_RESPONSE"
    optionList:
      type: array
      items:
        properties:
          optionId:
            type: integer
          optionValue:
            type: integer
          optionLabel:
            type: string
          optionName:
            type: string
    productList:
      type: array
      items:
        properties:
          sku:
            type: string
          basePrice:
            type: number
          discount:
            type: number
          offeredPrice:
            type: number
          quantity:
            type: integer
          productId:
            type: integer
          variantId:
            type: integer
          imageUrl:
            type: string
          orderQuantityMaximum:
            type: integer
          orderQuantityMinimum:
            type: integer
          productName:
            type: string
          options:
            $ref: "#/components/schemas/optionList"
    quoteContactInfo:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        companyName:
          type: string
        phoneNumber:
          type: string
    quoteShippingAddress:
      type: object
      properties:
        address:
          type: string
        apartment:
          type: string
        city:
          type: string
        state:
          type: string
        zipCode:
          type: string
        country:
          type: string
    quoteDiscount:
      type: number
    quoteGrandTotal:
      type: number
    quoteNotes:
      type: string
    quoteLegalTerms:
      type: string
    quoteChannel:
      type: integer
    quoteChannelName:
      type: string
    quoteSubtotal:
      type: number
    quoteStatus:
      type: integer
    quoteReference:
      type: string
    quoteTitle:
      type: string
    quoteExpired:
      type: string
    quoteId:
      type: string
      description: "Quote ID"
      example: 123456
    quoteUrl:
      type: string
    orderId:
      type: string
    bcOrderId:
      type: integer
    storeInfo:
      properties:
        storeName:
          type: string
        storeAddress:
          type: string
        storeCountry:
          type: string
    salesRepInfo:
      properties:
        salesRepName:
          type: string
        salesRepEmail:
          type: string
        salesRepPhoneNumber:
          type: string
    companyInfo:
      type: object
      properties:
        companyId:
          type: string
        companyName:
          type: string
        companyAddress:
          type: string
        copmanyCountry:
          type: string
        companyState:
          type: string
        companyCity:
          type: string
        companyZipCode:
          type: string
        phoneNumber:
          type: string
    email:
      type: string
      format: email
    storeHash:
      type: string
      description: "Store Hash"
      example: "abcd1234"
    currency_BASE:
      type: object
      properties:
        token:
          type: string
        location:
          type: string
        decimalToken:
          type: string
        decimalPlaces:
          type: number
        thousandsToken:
          type: string
    currency_RESPONSE:
      allOf:
        - $ref: "#/components/schemas/currency_BASE"
        - properties:
            currencyCode:
              type: string
            currencyExchangeRate:
              type: number
    currency_REQUEST:
      allOf:
        - $ref: "#/components/schemas/currency_BASE"
        - required:
            - token
            - location
            - decimalToken
            - decimalPlaces
            - thousandsToken
    currencyExchange:
      type: object
      properties:
        currencyExchangeRate:
          type: string
          description: "Exchange Rate"
          example: "1.0345"

# All schemas after this are response-specific
    responseObject:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
        data:
          type: object
    responseSuccess:
      allOf:
        - $ref: "#/components/schemas/responseObject"
        - properties:
            code:
              default: 200
            message:
              default: "SUCCESS"
  #responses:
  parameters:
    quoteId:
      name: quote_id
      in: path
      required: true
      schema:
        type: string
      example: ""
      description: ""
    storeHash_REQUIRED:
      name: storeHash
      in: query
      required: true
      schema:
        type: string
      example: ""
      description: ""
    storeHash:
      name: storeHash
      in: query
      schema:
        type: string
      example: ""
      description: ""
  securitySchemes:
    BearerToken:
      description: |-
        ### Authentication header
        | Header | Argument | Description |
        |:-------|:---------|:------------|
        |`Authorization`|`Bearer {{B2B_JWT_TOKEN}}`| You can obtain this token using the steps described in the [REST Storefront API](/b2b-edition/docs/authentication#rest-storefront-api) section of the [Authentication for hosted storefront](https://developer.bigcommerce.com/b2b-edition/docs/authentication) article. |
      type: http
      scheme: bearer
