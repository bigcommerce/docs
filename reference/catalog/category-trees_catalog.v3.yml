openapi: '3.0.3'
info:
  title: Catalog - Category trees
  description: |-
    > The Catalog API manages products, categories, brands, bulk pricing rules, and more. To learn more about catalog resources, see the [Catalog overview](/docs/store-operations/catalog).

    Our Catalog category trees and their [categories](/docs/rest-catalog/category-trees/categories) endpoints are the more modern and performant counterparts to the [categories (deprecated)](/docs/rest-catalog/categories) endpoints. Although the category trees endpoints and objects are designed to center an MSF-compatible, [multi-tenant category tree architecture](#categories), the endpoints work just as well in a single storefront context and support batch requests. Use [catalog trees categories](/docs/rest-catalog/category-trees/categories) endpoints, instead of [categories (deprecated)](/docs/rest-catalog/categories) endpoints.

    The category trees endpoints let you [get the categories for a specific tree](/docs/rest-catalog/category-trees/categories#get-a-category-tree), and [bulk create](/docs/rest-catalog/category-trees/categories#create-categories), [bulk update](/docs/rest-catalog/category-trees/categories#update-categories), and [bulk delete](/docs/rest-catalog/category-trees/categories#delete-categories) categories. You can also [bulk update the properties of category trees](/docs/rest-catalog/category-trees#upsert-category-trees), which includes changing the channels to which a tree is assigned.

    The terms "category tree" and "catalog tree" are used interchangeably throughout the documentation.

    > To learn more about authenticating Catalog endpoints, locate the **Authentication** section at the top of each endpoint, then click **Show Details**.

    ## Resources

    ### Webhooks
    Learn more about [Category tree webhook events](/docs/integrations/webhooks/events/channels#category-trees).

    ### Additional Catalog endpoints
    * [Brands](/docs/rest-catalog/brands)
    * [Categories](/docs/rest-catalog/categories)
    * [Products](/docs/rest-catalog/products)
    * [Product modifiers](/docs/rest-catalog/product-modifiers)
    * [Product variants](/docs/rest-catalog/product-variants)
    * [Product variant options](/docs/rest-catalog/product-variant-options)

  termsOfService: 'https://www.bigcommerce.com/terms'
  contact:
    name: BigCommerce
    url: 'https://www.bigcommerce.com'
    email: support@bigcommerce.com
  version: ''
servers:
  - url: 'https://api.bigcommerce.com/stores/{store_hash}/v3'
    variables:
      store_hash:
        default: store_hash
        description: Permanent ID of the BigCommerce store.
    description: BigCommerce API Gateway
security:
  - X-Auth-Token: []
tags:
  - name: Category trees
  - name: Categories
paths:
  '/catalog/trees/categories':
    get:
      summary: Get All Categories
      description: |-
        Returns a list of categories. 

        To get a specific category in a tree, provide a category ID.
      tags:
        - Categories
      parameters:
        - $ref: '#/components/parameters/CategoryUuidInParam'
        - $ref: '#/components/parameters/CategoryUuidNotInParam'
        - $ref: '#/components/parameters/CategoryIdInParam'
        - $ref: '#/components/parameters/CategoryIdNotInParam'
        - $ref: '#/components/parameters/TreeIdInParam'
        - $ref: '#/components/parameters/TreeIdNotInParam'
        - $ref: '#/components/parameters/ParentIdInParam'
        - $ref: '#/components/parameters/ParentIdNotInParam'
        - $ref: '#/components/parameters/PageTitleParam'
        - $ref: '#/components/parameters/PageTitleLikeParam'
        - $ref: '#/components/parameters/NameParam'
        - $ref: '#/components/parameters/NameLikeParam'
        - $ref: '#/components/parameters/KeywordParam'
        - $ref: '#/components/parameters/IsVisibleParam'
        - $ref: '#/components/parameters/IncludeFieldsParam'
        - $ref: '#/components/parameters/ExcludeFieldsParam'
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: List of categories.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryList'
              examples:
                Get Category 12:
                  value:
                    data:
                      - category_id: 12
                        category_uuid: d1964756-5e1d-4c72-9fa0-e1a3f7be4a34
                        parent_id: 2
                        tree_id: 1
                        name: Bath
                        description: <p>We offer a wide variety of products perfect for relaxing</p>
                        views: 1050
                        sort_order: 3
                        page_title: Bath
                        meta_keywords:
                          - string
                        meta_description: string
                        layout_file: category.html
                        image_url: 'https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png'
                        is_visible: true
                        search_keywords: string
                        default_product_sort: use_store_settings
                        url:
                          path: string
                          is_customized: true
                    meta:
                      pagination:
                        total: 246
                        count: 5
                        per_page: 5
                        current_page: 1
                        total_pages: 50
                        links:
                          previous: '?limit=5&page=1'
                          current: '?limit=5&page=2'
                          next: '?limit=5&page=3'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/GeneralError'
        '422':
          $ref: '#/components/responses/GeneralErrorWithErrors'
      operationId: getAllCategories
    post:
      summary: Create Categories
      description: |-
        Creates new categories. 

        Creating a category requires:
         - `name`
         - `tree_id` or `parent_id` 
      parameters:
        - $ref: '#/components/parameters/ContentType'
      tags:
        - Categories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategories'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                Create Category 36:
                  value:
                    data:
                      - category_id: 36
                        category_uuid: d2de0756-5e1d-4c72-9480-e1a3f7be4a34
                        parent_id: 0
                        tree_id: 1
                        name: Bath
                        description: <p>We offer a wide variety of products perfect for relaxing</p>
                        views: 1050
                        sort_order: 3
                        page_title: Bath
                        meta_keywords:
                          - loofah
                          - bubbles
                        meta_description: string
                        layout_file: category.html
                        image_url: 'https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png'
                        is_visible: true
                        search_keywords: string
                        default_product_sort: use_store_settings
                        url:
                          path: '/bath/'
                          is_customized: false
                    meta:
                      total: 1
                      success: 1
                      failed: 0
        '207':
          description: Multi-Status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartialSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/GeneralError'
        '422':
          description: 'The Category was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: createCategories
    put:
      summary: Update Categories
      description: |-
        Updates existing categories. 

        To update a specific category in a tree, provide a `category id`.
      parameters:
        - $ref: '#/components/parameters/ContentType'
      tags:
        - Categories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategories'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessNoContentResponse'
        '207':
          description: Partial success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartialSuccessNoContentResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/GeneralError'
        '422':
          description: 'The Category was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: updateCategories
    delete:
      summary: Delete categories
      description: |-
        Deletes categories. 

        To delete a specific category in a tree, provide a category ID.
      tags:
        - Categories
      parameters:
        - $ref: '#/components/parameters/CategoryUuidInParam'
        - $ref: '#/components/parameters/CategoryIdInParam'
        - $ref: '#/components/parameters/TreeIdInParam'
        - $ref: '#/components/parameters/ParentIdInParam'
      responses:
        '202':
          description: Categories are deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessNoContentResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/GeneralError'
        '422':
          $ref: '#/components/responses/GeneralErrorWithErrors'
      operationId: deleteTreeCategories
    parameters:
      - $ref: '#/components/parameters/Accept'
  '/catalog/trees':
    get:
      summary: Get all category trees
      description: Returns a list of category trees.
      operationId: getCategoryTrees
      parameters:
        - $ref: '#/components/parameters/IdInParam'
        - $ref: '#/components/parameters/ChannelIdInParam'
      responses:
        '200':
          description: List of category trees.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryTreeList'
              example:
                data:
                  - id: 0
                    name: string
                    channels:
                      - 0
                meta:
                  pagination:
                    total: 246
                    count: 5
                    per_page: 5
                    current_page: 1
                    total_pages: 50
                    links:
                      next: '?limit=5&page=2'
                      current: '?limit=5&page=1'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/GeneralError'
        '422':
          $ref: '#/components/responses/GeneralErrorWithErrors'
      tags:
        - Category trees
    put:
      summary: Upsert category trees
      description: |
        Upserts category trees. 

        This single endpoint updates and creates category trees. If a tree object contains an ID, it is processed as an update operation using that ID. If you do not provide an ID, a new tree is created. The category tree `name` field is required to create trees, but is not required on the update.
        
        **Usage Notes**
        * `channel_id` is required to create a category tree. You can assign one `channel_id` to one category tree.
      parameters:
        - $ref: '#/components/parameters/ContentType'
      operationId: upsertCategoryTrees
      requestBody:
        required: true
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/CategoryTreeListRequest'
      responses:
        '200':
          description: Created a category tree.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryTree'
              example:
                data:
                  - id: 0
                    name: string
                    channels:
                    - 0
                meta: {}
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/GeneralError'
        '422':
          description: The Channel was not valid. See the response for more details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/beta4ErrorResponse'
              example:
                status: 0
                title: string
                type: string
                instance: string
                errors:
                  additionalProp1: string
                  additionalProp2: string
                  additionalProp3: string
      tags:
        - Category trees
    delete:
      summary: Delete category trees
      description: Deletes category trees. A filter must be supplied with the endpoint.
      operationId: deleteCategoryTrees
      parameters:
        - $ref: '#/components/parameters/IdInParam'
      responses:
        '204':
          description: Deleted
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/GeneralError'
        '422':
          $ref: '#/components/responses/GeneralErrorWithErrors'
      tags:
        - Category trees
    parameters:
      - $ref: '#/components/parameters/Accept'
  '/catalog/trees/{tree_id}/categories':
    get:
      summary: Get a category tree
      description: Returns a category tree.
      operationId: getCategoryTree
      parameters:
        - name: depth
          description: Max depth for a tree of categories.
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Categories tree
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryNodeTree'
              example:
                data:
                  - id: 0
                    parent_id: 0
                    depth: 0
                    path:
                      - 0
                    name: string
                    is_visible: true
                    children:
                      - string
                meta:
                  type: object
                  properties: {}
                  description: Empty meta object; reserved for use later.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/GeneralError'
        '404':
          description: The tree was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/beta4ErrorResponse'
              example:
                status: 0
                title: string
                type: string
                instance: string
                errors:
                  additionalProp1: string
                  additionalProp2: string
                  additionalProp3: string
      tags:
        - Category trees
    parameters:
      - $ref: '#/components/parameters/Accept'
      - $ref: '#/components/parameters/TreeIdParam'
components:
  schemas:
    metaEmpty_Full:
      type: object
      title: Response meta
      properties: {}
      additionalProperties: true
      description: Response metadata.
    DetailedErrors:
      title: DetailedErrors
      description: Each key-value pair describes a failure or partial success case.
      type: object
      properties: {}
      additionalProperties: true
      x-internal: false
    GetCategories:
      title: Get Categories
      allOf:
        - type: object
          properties:
            name:
              $ref: '#/components/schemas/name'
            category_id:
              $ref: '#/components/schemas/category_id'
            category_uuid:
              $ref: '#/components/schemas/category_uuid'
            tree_id:
              $ref: '#/components/schemas/tree_id'
            parent_id:
              $ref: '#/components/schemas/parent_id'
        - $ref: '#/components/schemas/CategoryBase'
        - type: object
          properties:
            url:
              $ref: '#/components/schemas/url'
    CreateCategories:
      title: Create Categories
      type: array
      items:
        allOf:
        - type: object
          properties:
            name:
              $ref: '#/components/schemas/name'
            url:
              $ref: '#/components/schemas/url'
            parent_id:
              $ref: '#/components/schemas/parent_id'
            tree_id:
              $ref: '#/components/schemas/tree_id'
          required:
            - name
            - tree_id
            - parent_id
        - $ref: '#/components/schemas/CategoryBase'
    UpdateCategories:
      type: array
      items:
        allOf:
          - type: object
            properties:
              category_id:
                $ref: '#/components/schemas/category_id'
              name:
                $ref: '#/components/schemas/name'
              tree_id:
                $ref: '#/components/schemas/tree_id'
              parent_id:
                $ref: '#/components/schemas/parent_id'
            required:
              - category_id
          - $ref: '#/components/schemas/CategoryBase'
          - type: object
            properties:
              url:
                $ref: '#/components/schemas/url'
    CategoryBase:
      title: Category
      type: object
      properties:
        description:
          type: string
          description: |
            The product description, which can include HTML formatting.
          example: <p>We offer a wide variety of products perfect for relaxing</p>
        views:
          type: integer
          description: |
            Number of views the category has on the storefront.
          example: 1050
        sort_order:
          type: integer
          description: |
            Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be.
          example: 3
        page_title:
          type: string
          description: |
            Custom title for the category page. If not defined, the category name will be used as the meta title.
          example: Bath
        meta_keywords:
          type: array
          description: |
            Custom meta keywords for the category page. If not defined, the storeʼs default keywords will be used. Must post as an array like: ["awesome","sauce"].
          example:
            - shower
            - tub
          items:
            type: string
        meta_description:
          maxLength: 65535
          minLength: 0
          type: string
          description: |
            Custom meta description for the category page. If not defined, the storeʼs default meta description will be used.
        layout_file:
          maxLength: 500
          minLength: 0
          type: string
          description: |
            A valid layout file. (Please refer to [this article](https://support.bigcommerce.com/articles/Public/Creating-Custom-Template-Files/) on creating category files.) This field is writable only for stores with a Blueprint theme applied.
          example: category.html
        image_url:
          type: string
          description: |
            Image URL used for this category on the storefront. Images can be uploaded via form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field. Must be either a full-qualified URL or an empty string.
          example: 'https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png'
          x-url: true
        is_visible:
          type: boolean
          description: |
            Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view.
        search_keywords:
          type: string
          description: |
            A comma-separated list of keywords that can be used to locate the category when searching the store.
        default_product_sort:
          type: string
          description: |
            Determines how the products are sorted on category page load.
          enum:
            - use_store_settings
            - featured
            - newest
            - best_selling
            - alpha_asc
            - alpha_desc
            - avg_customer_review
            - price_asc
            - price_desc
    CategoryList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/GetCategories'
        meta:
          $ref: '#/components/schemas/MetaPagination'
    CategoryNodeTree:
          type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/CategoryNode'
            meta:
              $ref: '#/components/schemas/metaEmpty_Full'
    CategoryTreeList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Tree'
        meta:
          $ref: '#/components/schemas/MetaPaginationObject'
    CategoryTree:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Tree'
        meta:
          $ref: '#/components/schemas/metaEmpty_Full'
    MetaPagination:
      type: object
      properties:
        pagination:
          type: object
          properties:
            total:
              type: integer
              example: 246
              minimum: 0
            count:
              type: integer
              example: 5
              minimum: 0
            per_page:
              type: integer
              example: 5
              minimum: 0
            current_page:
              type: integer
              example: 1
              minimum: 1
            total_pages:
              type: integer
              example: 50
              minimum: 0
            links:
              type: object
              properties:
                previous:
                  type: string
                  example: '?limit=5&page=1'
                current:
                  type: string
                  example: '?limit=5&page=2'
                next:
                  type: string
                  example: '?limit=5&page=3'
      x-tags:
        - Models
    ErrorRequest:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorBasic'
      x-tags:
        - Models
    ErrorBasic:
      type: object
      properties:
        status:
          description: |
            The HTTP status code.
          type: integer
        title:
          description: |
            The error title describing the particular error.
          type: string
        type:
          type: string
      x-tags:
        - Models
    ErrorAdditional:
      type: object
      properties:
        errors:
          $ref: '#/components/schemas/DetailedErrors'
      x-tags:
        - Models
    MetaError:
      allOf:
        - $ref: '#/components/schemas/ErrorBasic'
        - $ref: '#/components/schemas/ErrorAdditional'
      x-tags:
        - Models
    MetaData:
      type: object
      properties:
        total:
          type: integer
        success:
          type: integer
        failed:
          type: integer
      x-tags:
        - Models
    SuccessNoContentResponse:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaData'
      x-tags:
        - Models
    PartialSuccessNoContentResponse:
      type: object
      properties:
        errors:
          $ref: '#/components/schemas/MetaError'
        meta:
          $ref: '#/components/schemas/MetaData'
      x-tags:
        - Models
    PartialSuccessResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/GetCategories'
        errors:
          $ref: '#/components/schemas/MetaError'
        meta:
          $ref: '#/components/schemas/MetaData'
      x-tags:
        - Models
    SuccessResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/GetCategories'
        meta:
          $ref: '#/components/schemas/MetaData'
      x-tags:
        - Models
    ErrorResponse:
      type: object
      properties:
        errors:
          $ref: '#/components/schemas/MetaError'
        meta:
          $ref: '#/components/schemas/MetaData'
      x-tags:
        - Models
    Tree:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          minLength: 1
          maxLength: 255
        channels:
          type: array
          items:
            type: integer
      x-tags:
        - Models
    CategoryTreeListRequest:
      type: array
      items:
        $ref: '#/components/schemas/Tree'
      example:
        - id: 0
          name: string
          channels:
            - 0
    CategoryNode:
      type: object
      properties:
        id:
          type: integer
        parent_id:
          type: integer
        depth:
          type: integer
        path:
          type: array
          items:
            type: integer
        name:
          type: string
        is_visible:
          type: boolean
        children:
          type: array
          items:
            $ref: '#/components/schemas/CategoryNode'
      x-tags:
        - Models
    MetaPaginationObject:
      type: object
      properties:
        pagination:
          type: object
          properties:
            total:
              type: integer
              example: 246
              minimum: 0
            count:
              type: integer
              example: 5
              minimum: 0
            per_page:
              type: integer
              example: 5
              minimum: 0
            current_page:
              type: integer
              example: 1
              minimum: 1
            total_pages:
              type: integer
              example: 50
              minimum: 0
            links:
              type: object
              properties:
                next:
                  type: string
                  example: '?limit=5&page=2'
                current:
                  type: string
                  example: '?limit=5&page=1'
      x-tags:
        - Models
    beta4DetailedErrors:
      type: object
      properties: {}
      additionalProperties: true
      x-tags:
        - Models
    BaseError:
      type: object
      description: |
        Error payload for the BigCommerce API.
      properties:
        status:
          description: |
            The HTTP status code.
          type: integer
        title:
          description: |
            The error title describing the particular error.
          type: string
        type:
          type: string
        instance:
          type: string
      x-tags:
        - Models
    beta4ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/BaseError'
        - type: object
          properties:
            errors:
              $ref: '#/components/schemas/beta4DetailedErrors'
      x-tags:
        - Models
    url:
      title: URL
      description: |
        If not provided in POST request, the URL is autogenerated from the category name.
      type: object
      properties:
        path:
          type: string
          example: '/bath/'
        is_customized:
          type: boolean
          example: false
    category_uuid:
      title: Category UUID
      type: string
      description: An additional unique identifier for the category. Read-Only.
      format: uuid
      readOnly: true
      example: d1964756-5e1d-4c72-9fa0-e1a3f7be4a34
    category_id:
      title: Category ID
      type: integer
      description: |-
        Unique ID of the *Category*. Increments sequentially.
      example: 36
    parent_id:
      title: Parent ID
      type: integer
      description: |-
        The unique numeric ID of the categoryʼs parent. This field controls where the category sits in the tree of categories that organize the catalog.
        Required in a POST if creating a child category.
      example: 0
    tree_id:
      title: Tree ID
      type: integer
      description: The ID of the category tree.
      example: 1
    name:
      title: Name
      maxLength: 50
      minLength: 1
      type: string
      description: |-
        The name displayed for the category. Name is unique with respect to the categoryʼs siblings.
        Required in a POST.
      example: Bath
    NotFoundError:
      required:
        - status
        - title
        - type
      title: Not Found
      type: object
      properties:
        status:
          type: integer
          description: The HTTP status code.
        title:
          type: string
          description: The error title describing the particular error.
        type:
          type: string
    GeneralError:
      required:
        - status
        - title
        - type
      title: ''
      type: object
      properties:
        status:
          type: integer
          description: The HTTP status code.
        title:
          type: string
          description: The error title describes the particular error.
        type:
          type: string
        code:
          type: integer
          description: The custom code of the error.
    GeneralErrorWithErrors:
      required:
        - status
        - title
        - type
        - errors
      title: ''
      type: object
      properties:
        status:
          type: integer
          description: The HTTP status code.
        title:
          type: string
          description: The error title describing the particular error.
        type:
          type: string
        errors:
          title: Detailed Errors
          type: object
          properties: { }
          additionalProperties: true
  responses:
    UnauthorizedError:
      description: Unauthorized
      content:
        plain/text:
          schema:
            type: string
    BadRequestError:
      description: Bad Request
      content:
        plain/text:
          schema:
            type: string
    GeneralError:
      description: ''
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralError'
    GeneralErrorWithErrors:
      description: ''
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                $ref: '#/components/schemas/GeneralErrorWithErrors'
              meta:
                $ref: '#/components/schemas/MetaData'
  parameters:
    Accept:
      name: Accept
      in: header
      required: true
      description: 'The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.'
      schema:
        type: string
        default: 'application/json'
    ContentType:
      name: Content-Type
      in: header
      required: true
      description: 'The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.'
      schema:
        type: string
        default: 'application/json'
    PageParam:
      name: page
      description: |
        Specifies the page number in a limited (paginated) list of products.
      required: false
      in: query
      schema:
        type: integer
    LimitParam:
      name: limit
      description: |
        Controls the number of items per page in a limited (paginated) list of products.
      required: false
      in: query
      schema:
        type: integer
        default: 50
        maximum: 250
    IncludeFieldsParam:
      name: include_fields
      in: query
      description: Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    ExcludeFieldsParam:
      name: exclude_fields
      in: query
      description: Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    KeywordParam:
      name: keyword
      in: query
      description: Filter items by keywords found in the `name`, `description`, or `sku` fields, or in the brand name.
      schema:
        type: string
    IsVisibleParam:
      name: is_visible
      in: query
      description: Filter items based on whether the product is currently visible on the storefront.
      schema:
        type: boolean
    NameParam:
      name: name
      in: query
      description: |
        Filter items by name.
      schema:
        type: string
    NameLikeParam:
      name: 'name:like'
      in: query
      required: false
      description: 'Filter items by substring in the name property. `name:like=stick` returns both `Stickers` and `Lipstick colors`.'
      schema:
        type: string
    PageTitleLikeParam:
      name: 'page_title:like'
      in: query
      required: false
      description: 'Filter items by substring in the page title property. `page_title:like=oil` returns both `Soil and mulch` and `Oil pastels`.'
      schema:
        type: string
    PageTitleParam:
      name: page_title
      in: query
      description: |
        Filter items by page_title.
      schema:
        type: string
    TreeIdParam:
      schema:
        type: integer
      name: tree_id
      description: The ID of the category tree.
      in: path
      required: true
    IdInParam:
      name: 'id:in'
      in: query
      description: |-
        Filter by supplying a comma-separated list of category tree IDs.
      style: form
      explode: false
      schema:
        type: array
        items:
          type: integer
          description: A category tree ID.
    ChannelIdInParam:
      name: 'channel_id:in'
      in: query
      description: |-
        Filter by supplying a comma-separated list of channel IDs.
      style: form
      explode: false
      schema:
        type: array
        items:
          type: integer
          description: A channel ID.
    CategoryUuidInParam:
      name: 'category_uuid:in'
      in: query
      description: Filter using a comma-separated list of one or more category UUIDs. To use category IDs, use the `category_id:in` parameter.
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          format: uuid
          description: A category UUID.
    CategoryIdInParam:
      name: 'category_id:in'
      in: query
      description: Filter using a comma-separated list of one or more category IDs. To use category UUIDs, use the `category_uuid:in` parameter.
      style: form
      explode: false
      schema:
        type: array
        items:
          type: integer
          description: A category ID.
    TreeIdInParam:
      name: 'tree_id:in'
      in: query
      description: Filter using a comma-separated list of one or more category tree IDs.
      style: form
      explode: false
      schema:
        type: array
        items:
          type: integer
          description: A category tree ID.
    ParentIdInParam:
      name: 'parent_id:in'
      in: query
      style: form
      explode: false
      schema:
        type: array
        items:
          type: integer
    CategoryUuidNotInParam:
      name: 'category_uuid:not_in'
      in: query
      description: Filter using a comma-separated list to exclude one or more category UUIDs. To exclude using category IDs, use the `category_id:not_in` parameter.
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          format: uuid
          description: A category UUID.
    CategoryIdNotInParam:
      name: 'category_id:not_in'
      in: query
      description: Filter using a comma-separated list to exclude one or more category IDs. To exclude using category UUIDs, use the `category_uuid:not_in` parameter.
      style: form
      explode: false
      schema:
        type: array
        items:
          type: integer
          description: A category ID.
    TreeIdNotInParam:
      name: 'tree_id:not_in'
      in: query
      description: Filter using a comma-separated list to exclude one or more category tree IDs.
      style: form
      explode: false
      schema:
        type: array
        items:
          type: integer
          description: A category tree ID.
    ParentIdNotInParam:
      name: 'parent_id:not_in'
      in: query
      style: form
      explode: false
      schema:
        type: array
        items:
          type: integer
  securitySchemes:
    X-Auth-Token:
      name: X-Auth-Token
      description: |-
        ### OAuth scopes

        | UI Name | Permission | Parameter |
        |:--------|:-----------|:----------|
        |  Products | modify | `store_v2_products` |
        |  Products | read-only | `store_v2_products_read_only` |

        ### Authentication header
        
        | Header | Argument | Description |
        |:-------|:---------|:------------|
        | `X-Auth-Token` | `access_token` | For more about API accounts that generate `access_token`s, see our [Guide to API Accounts](/docs/start/authentication/api-accounts). |
        
        ### Further reading
        
        For example requests and more information about authenticating BigCommerce APIs, see [Authentication and Example Requests](/docs/start/authentication#x-auth-token-header-example-requests).
        
        For more about BigCommerce OAuth scopes, see our [Guide to API Accounts](/docs/start/authentication/api-accounts#oauth-scopes).
        
        For a list of API status codes, see [API Status Codes](/docs/start/about/status-codes).
      type: apiKey
      in: header
