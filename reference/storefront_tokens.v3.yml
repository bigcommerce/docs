openapi: '3.0.1'
info:
  title: GraphQL Storefront API tokens
  description: |-
    Get and manage tokens used to authenticate cross-origin requests to the [GraphQL Storefront API](/docs/storefront/graphql).

    Add a [token creation scope](/docs/start/authentication/api-accounts#token-creation-scopes) to the [store-level or app-level API account](/docs/start/authentication/api-accounts) you use to generate tokens.

    ## Storefront tokens

    This type of token is the most appropriate to use from a web browser when you're serving a static site that only supports anonymous shopping. If you're creating a token for backend implementation, you wish to support signing in customers, or you're developing a frontend app that proxies requests, such as a NextJS app, use a [customer impersonation token](#customer-impersonation-tokens). 

    ## Customer impersonation tokens

    Customer impersonation token-authenticated requests receive store information from the perspective of the customer with the ID specified in the `X-Bc-Customer-Id` header. The customer will automatically see the correct pricing, product availability, order history, and account details.

    This special token is not necessary if you only wish to query information from an anonymous shopper's perspective.

    > #### Warning
    > Unless your frontend client proxies requests, attempts to authenticate from the brower using customer impersonation tokens will be rejected.

    ## Additional information

    * [GraphQL Storefront API overview](/docs/storefront/graphql)
    * [Authenticating requests to the GraphQL Storefront API](/docs/start/authentication/graphql-storefront)
  termsOfService: 'https://www.bigcommerce.com/terms'
  contact:
    name: BigCommerce
    url: 'https://www.bigcommerce.com'
    email: support@bigcommerce.com
  version: ''
servers:
  - url: 'https://api.bigcommerce.com/stores/{store_hash}/v3'
    variables:
      store_hash:
        default: store_hash
        description: Permanent ID of the BigCommerce store.
    description: BigCommerce API Gateway
security:
  - X-Auth-Token: []
tags:
  - name: API Token
  - name: Customer Impersonation Token
paths:
  '/storefront/api-token':
    parameters:
      - $ref: '#/components/parameters/Accept'
    post:
      tags:
        - API Token
      summary: Create a Token
      description: |-
        Creates a Storefront API token.

        **Required Scopes**
        * `Manage` `Storefront API Tokens`
      operationId: createToken
      parameters:
        - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/TokenPostSimple'
                - $ref: '#/components/schemas/TokenPostImpersonation'
            example:
              allowed_cors_origins:
                -  'https://www.yourstorefront.com/'
              channel_id: 1
              expires_at: 1885635176
        required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token_Full'
        '401':
          description: Unauthorized - the v3 Auth client ID or token in the request are not a valid combination for this store.
          content: {}
        '403':
          description: Missing scope - the v3 Auth token is valid but does not have proper permissions to access this endpoint.
          content: {}
        '422':
          description: Invalid JSON request body - missing or invalid data.
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
        - API Token
      summary: Revoke a Token
      description: Revoke access for a Storefront API token. Only revoke compromised tokens under emergency situations. Let uncompromised short-lived tokens expire naturally, as you do not need to revoke these.
      operationId: revokeToken
      parameters:
        - name: Sf-Api-Token
          in: header
          description: An existing JWT token that you want to revoke.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A storefront API token revocation has been scheduled.
          content: {}
        '401':
          description: Unauthorized - the v3 Auth client ID or token in the request are not a valid combination for this store.
          content: {}
        '403':
          description: Missing scope - the v3 Auth token is valid but does not have proper permissions to access this endpoint.
          content: {}
        '422':
          description: Invalid JWT Token provided or missing JWT token header
          content: {}
  '/storefront/api-token-customer-impersonation':
    parameters:
      - $ref: '#/components/parameters/Accept'
    post:
      tags:
        - Customer Impersonation Token
      summary: Create a Token
      description: |-
        Returns a Storefront API token that allows your application to impersonate customers when making GraphQL `POST` requests. For more information on how to use the returned token, see [customer impersonation tokens](/docs/rest-authentication/tokens/customer-impersonation-token#create-a-token).

        **Required Scopes**
        * `Manage` `Storefront API Customer Impersonation Tokens`
      operationId: createTokenWithCustomerImpersonation
      parameters:
        - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenPostImpersonation'
        required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token_Full'
        '401':
          description: Unauthorized - the v3 Auth client ID or token in the request are not a valid combination for this store.
          content: {}
        '403':
          description: Missing scope - the v3 Auth token is valid but does not have proper permissions to access this endpoint.
          content: {}
        '422':
          description: Invalid JSON request body - missing or invalid data
          content: {}
components:
  parameters:
    Accept:
      name: Accept
      in: header
      required: true
      description: 'The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.'
      schema:
        type: string
        default: 'application/json'
    ContentType:
      name: Content-Type
      in: header
      required: true
      description: 'The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.'
      schema:
        type: string
        default: 'application/json'
  schemas:
    TokenPostImpersonation:
      x-internal: false
      allOf:
        - type: object
          properties:
            expires_at:
              type: integer
              description: Unix timestamp (UTC time) defining when the token should expire. Supports seconds, but does not support milliseconds, microseconds, or nanoseconds.
              example: 1885635176
              minimum: 0
          required:
            - expires_at
        - oneOf:
          - $ref: "#/components/schemas/Channels"
          - $ref: "#/components/schemas/Channel"
      required:
        - expires_at
    TokenPostSimple:
      type: object
      properties:
        allowed_cors_origins:
          maxItems: 2
          minItems: 1
          type: array
          description: List of allowed domains for Cross-Origin Request Sharing. Currently accepts a maximum of two domains per created token.
          items:
            minLength: 1
            type: string
      x-internal: false
    Token_Full:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Token_Base'
        meta:
          type: object
          properties: {}
          additionalProperties: true
          description: Response metadata.
    Token_Base:
      type: object
      properties:
        token:
          type: string
          description: JWT Token for accessing the Storefront API
      x-internal: false
    Channel:
      title: channel_id
      type: object
      x-internal: false
      properties:
        channel_id:
          type: integer
          minimum: 1
          description: Channel ID that is valid for the requested token. Use this field to enter a channel ID. Do not use this field if you have more than one channel. We support this field for backwards compatibility, but `channel_ids` is preferred. You can not use both `channel_id` and `channel_ids` in your request.
          example: 1
      required:
        - channel_id
    Channels:
      title: channel_ids
      type: object
      x-internal: false
      properties:
        channel_ids:
          type: array
          description: A list of channel IDs that are valid for the requested token. Use this field if you have more than one channel ID. You can not use both `channel_id` and `channel_ids` in your request.
          items:
            type: integer
          example: [667251, 1]
      required:
        - channel_ids
    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/BaseError'
        - type: object
          properties:
            errors:
              $ref: '#/components/schemas/DetailedErrors'
      x-internal: false
    BaseError:
      type: object
      properties:
        status:
          type: integer
          description: |
            The HTTP status code.
        title:
          type: string
          description: |
            The error title describing the particular error.
        type:
          type: string
      description: |
        Error payload for the BigCommerce API.
      x-internal: false
    DetailedErrors:
      type: object
      properties: {}
      additionalProperties:
        type: string
      x-internal: false
  responses:
    TokenResponse:
      description: ''
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Token_Full'
  securitySchemes:
    X-Auth-Token:
      type: apiKey
      description: |-
        ### OAuth scopes

        | UI Name | Permission | Parameter |
        |:--------|:-----------|:----------|
        | Storefront API Customer Impersonation Tokens | manage | `store_storefront_api_customer_impersonation` |
        | Storefront API Tokens | manage | `store_storefront_api` |

        ### Authentication header
        
        | Header | Argument | Description |
        |:-------|:---------|:------------|
        | `X-Auth-Token` | `access_token` | For more about API accounts that generate `access_token`s, see our [Guide to API Accounts](/docs/start/authentication/api-accounts). |

        ### Further reading
        
        For example requests and more information about authenticating BigCommerce APIs, see [Authentication and Example Requests](/docs/start/authentication#x-auth-token-header-example-requests).
        
        For more about BigCommerce OAuth scopes, see our [Guide to API Accounts](/docs/start/authentication/api-accounts#oauth-scopes).
        
        For a list of API status codes, see [API Status Codes](/docs/start/about/status-codes).
      name: X-Auth-Token
      in: header

